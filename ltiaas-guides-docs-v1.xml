This file is a merged representation of a subset of the codebase, containing specifically included files, combined into a single document by Repomix.
The content has been processed where content has been compressed (code blocks are separated by ⋮---- delimiter).

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of a subset of the repository's contents that is considered the most important context.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: ltiaas-guides-docs/**
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Content has been compressed - code blocks are separated by ⋮---- delimiter
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
ltiaas-guides-docs/
  guides/
    api/
      async/
        index.md
      authentication/
        index.md
      authentication#bearer-api-key-based-authentication/
        index.md
      authentication#ltik-based-authentication/
        index.md
      authentication#service-key-based-authentication/
        index.md
      deeplinking/
        index.md
      dynamic-registration/
        index.md
      idtoken/
        index.md
      idtoken#assignmentandgrades/
        index.md
      idtoken#context/
        index.md
      idtoken#deeplinking/
        index.md
      idtoken#namesandroles/
        index.md
      idtoken#performing-sso/
        index.md
      introduction/
        index.md
      manipulating-grade-lines/
        index.md
      manipulating-grade-lines#retrieving-grade-lines-for-a-context/
        index.md
      manipulating-grades/
        index.md
      pagination/
        index.md
      roster/
        index.md
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="ltiaas-guides-docs/guides/api/async/index.md">
---
title: Accessing the API asynchronously
url: https://docs.ltiaas.com/guides/api/async
source: LTIaaS Documentation
---

# Accessing the API asynchronously

-   [](/)
-   [Using the LTIAAS API](/guides/api/introduction)
-   Accessing the API asynchronously

On this page

# Accessing the API asynchronously

caution

Due to the nature of LTI®, it's recommended to always utilize the services synchoronously, within the context of an LTI® launch. For most use cases it should be enough and a lot easier to trigger periodic tasks when someone launches to your tool.

Some of the LTI® services might be useful to access outside of the context of an LTI® launch. For example, you might want to run a cron job daily to submit students grades.

Since the `ltik` token used in the [ltik based API authentication method](/guides/api/authentication#ltik-based-authentication) expires after **24 hours**, it's not ideal for this kind of use case. Instead, you can use the `serviceKey` token detailed in the [service key based API authentication method](/guides/api/authentication#service-key-based-authentication) to call the LTIAAS service API asynchronously.

![Using service key to access the LTIAAS API](/assets/ideal-img/flow_service_key.d7bcfd1.1142.png)

![Using service key to access the LTIAAS API](/assets/ideal-img/flow_service_key_dark.799c6b9.1142.png)

Using service key to access the LTIAAS API

## Retrieving the service key[​](#retrieving-the-service-key "Direct link to heading")

After receiving an LTI® launch you can use the [ltik based authentication](/guides/api/authentication#ltik-based-authentication) to [retrieve an ID Token](/guides/api/idtoken). If the current LTI® launch context has access to at least one of the *Assignment and Grades* or *Names and Roles Provisioning* LTI® services, the ID Token you retrieved will have an `idtoken.services.serviceKey` field.

```
// Building Ltik based API authentication header  
const authorizationHeader = `LTIK-AUTH-V2 ${API_KEY}:${LTIK}`  
const headers = { Authorization: authorizationHeader }  
// Making /api/idtoken GET request  
const response = requests.get('https://your.ltiaas.com/api/idtoken', { headers })  
// Retrieving service key  
const serviceKey = response['services']['serviceKey']
```

## Storing the service key[​](#storing-the-service-key "Direct link to heading")

Each `serviceKey` represents a single LTI® launch context, which usually translates to an activity in the LMS. So you need to be mindful of that when storing and using these tokens. Calling the API using a certain `serviceKey` will yield results from the launch context that it's associated with.

Ideally you want to store the `serviceKey` in your database along with the, **resource link ID**, **context ID** and **platform (LMS) ID** that originated it.

```
// Building Ltik based API authentication header  
const authorizationHeader = `LTIK-AUTH-V2 ${API_KEY}:${LTIK}`  
const headers = { Authorization: authorizationHeader }  
// Making /api/idtoken GET request  
const response = requests.get('https://your.ltiaas.com/api/idtoken', { headers })  
// Retrieving service key and context and platform IDs  
const serviceKey = response['services']['serviceKey']  
const resourceLinkId = response['launch']['resourceLink']['id']  
const contextId = response['launch']['context']['id']  
const platformId = response['platform']['id']  

storeServiceKeyInDatabase(resourceLinkId, contextId, platformId, serviceKey)
```

caution

The `serviceKey` does not expire, however, due to the nature of LTI®, the information stored within a certain `serviceKey` might become inaccurate at some point and this will likely cause API requests to fail. For this reason it's recommended to always update the `serviceKey` for a certain context **on every launch**.

tip

It also makes sense to store the context IDs along side activity and grading information on your application, so you can know which `serviceKey` to use when calling the API to perform an action.

## Using the service key[​](#using-the-service-key "Direct link to heading")

Once you have a `serviceKey` stored, you can use it to perform the LTIAAS service API calls by using the [service key based API authentication method](/guides/api/authentication#service-key-based-authentication).

*Synchronizing grades example:*

```
const getLineItem = (headers, resourceLinkId) => {  
  // Making /api/lineitems GET request to get line item for resource link  const url = `https://your.ltiaas.com/api/lineitems?resourceLinkId=${resourceLinkId}`  const lineitems = requests.get(url, { headers })  return encodeURIComponent(lineitems[0]['id'])}  

const sendGrade = (headers, lineItemId, grade) => {  
  // Making /api/lineitems/<id>/scores POST request to sync grades  const score = {    userId: grade.userId,    scoreGiven: grade.score,    activityProgress: 'Completed',    gradingProgress: 'FullyGraded'  }  requests.post(`https://your.ltiaas.com/api/lineitems/${lineItemId}/scores`, score, { headers })}  

const syncGrades = (activity) => {  
  // Get service key for activity  const serviceKey = getServiceKeyFromDatabase(activity)  // Building service key based API authentication header  const authorizationHeader = `SERVICE-AUTH-V1 ${API_KEY}:${serviceKey}`  const headers = { Authorization: authorizationHeader }  // Get line item ID for activity  const lineItemId = getLineItem(headers, activity.resourceLinkId)  // Send grades  for (const grade of activity.grades) {    sendGrade(headers, lineItemId, grade)  }}  

// This task runs once a day  
const activities = getAcvivitiesFromDatabase()  
for (const activity of activities) {  
  syncGrades(activity)}
```

**Tags:**

-   [API](/tags/api)
-   [Async](/tags/async)
-   [Tutorials](/tags/tutorials)
</file>

<file path="ltiaas-guides-docs/guides/api/authentication/index.md">
---
title: Authenticating API requests
url: https://docs.ltiaas.com/guides/api/authentication
source: LTIaaS Documentation
---

# Authenticating API requests

-   [](/)
-   [Using the LTIAAS API](/guides/api/introduction)
-   Authenticating API requests

On this page

# Authenticating API requests

caution

LTIAAS API endpoints **must** only be called from your application's back-end. Authenticated API requests will include your API key, so making them from the front-end might result in your credentials getting leaked.

## Ltik based authentication[​](#ltik-based-authentication "Direct link to heading")

![Using ltik token to access the LTIAAS API](/assets/ideal-img/flow_ltik.fea24ac.1118.png)

![Using ltik token to access the LTIAAS API](/assets/ideal-img/flow_ltik_dark.9f75f8c.1118.png)

Using ltik token to access the LTIAAS API

During an LTI® launch, LTIAAS will perform the LTI® protocol authentication flow and then redirect the user to your application, this redirection will also append a query parameter called `ltik` to your account's registered target launch URL:

> [https://your.tool.com/launch?ltik=eyJhbGciOiJIUzI1NiIs](https://your.tool.com/launch?ltik=eyJhbGciOiJIUzI1NiIs)...

This token represents a single LTI® launch and allows LTIAAS to store and retrieve information specific to that launch context. You can then combine your account's `API Key` and the `ltik` token received to build the following authorization header:

```
Authorization: LTIK-AUTH-V2 <API_KEY>:<LTIK>
```

Example:

```
Authorization: LTIK-AUTH-V2 df06d55e-3b0f-4121-b60f-c39469b5b550:eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0
```

caution

The `ltik` token represents a single LTI® launch, therefore each token must only be used in requests made within the same launch context in which it was generated. Using an `ltik` token outside of its originating context can cause unexpected behavior and provide outdated information.

caution

Due to the nature of LTI®, the ID Token related to a launch should not be trusted after some time, for this reason each `ltik` token **expires after 24 hours.**

The ltik based authentication schema is accepted by all of the LTIAAS service API endpoints.

## Service key based authentication[​](#service-key-based-authentication "Direct link to heading")

![Using service key to access the LTIAAS API](/assets/ideal-img/flow_service_key.d7bcfd1.1142.png)

![Using service key to access the LTIAAS API](/assets/ideal-img/flow_service_key_dark.799c6b9.1142.png)

Using service key to access the LTIAAS API

If you need to make API requests outside of the context of an LTI® launch, you can use the service key based authentication schema.

caution

Due to the nature of LTI®, it's recommended to always utilize the services synchoronously, within the context of an LTI® launch. For most use cases it should be enough and a lot easier to trigger periodic tasks when someone launches to your tool.

After receiving an LTI® launch you can use the [ltik based authentication](#ltik-based-authentication) to [retrieve an ID Token](/guides/api/idtoken). If the current LTI® launch context has access to at least one of the *Assignment and Grades* or *Names and Roles Provisioning* LTI® services, the ID Token you retrieved will have an `idtoken.services.serviceKey` field.

```
// Building Ltik based API authentication header  
const authorizationHeader = `LTIK-AUTH-V2 ${API_KEY}:${LTIK}`  
const headers = { Authorization: authorizationHeader }  
// Making /api/idtoken GET request  
const response = requests.get('https://your.ltiaas.com/api/idtoken', { headers })  
// Retrieving service key  
const serviceKey = response['services']['serviceKey']
```

You can then combine your account's `API Key` with the `serviceKey` retrieved to build the following authorization header.

```
Authorization: SERVICE-AUTH-V1 <API_KEY>:<SERVICE_KEY>
```

Example:

```
Authorization: SERVICE-AUTH-V1 df06d55e-3b0f-4121-b60f-c39469b5b550:eyJhbGcieyJzdWIiOiIxMjM0.OiJIUzI1NiIsInR5cCI6IkpXVCJ9
```

info

Unlike the `ltik` token, the `serviceKey` will not expire after 24 hours and can be used outside of an LTI® launch. This allows you to, for example, run a cron job to synchronize grades once a day.

It's important to note that each `serviceKey` represents a single LTI® launch context, which usually translates to an activity in the LMS. So you need to be mindful of that when storing and using these tokens. Calling the API using a certain `serviceKey` will yield results from the launch context that it's associated with.

tip

You can learn more about using the service key based API authentication method in the [Accessing the API asynchronously guide](/guides/api/async).

## Bearer API key based authentication[​](#bearer-api-key-based-authentication "Direct link to heading")

A select few API endpoints are not related to an LTI launch context, such as during dynamic registration. Therefore, an LTIK or service key is not available. Only the API key needs to be sent in the form of a Bearer token.

```
Authorization: Bearer <API_KEY>
```

Example:

```
Authorization: Bearer df06d55e-3b0f-4121-b60f-c39469b5b550
```

**Tags:**

-   [API](/tags/api)
-   [Authentication](/tags/authentication)
-   [Tutorials](/tags/tutorials)
</file>

<file path="ltiaas-guides-docs/guides/api/authentication#bearer-api-key-based-authentication/index.md">
---
title: Authenticating API requests
url: https://docs.ltiaas.com/guides/api/authentication#bearer-api-key-based-authentication
source: LTIaaS Documentation
---

# Authenticating API requests

-   [](/)
-   [Using the LTIAAS API](/guides/api/introduction)
-   Authenticating API requests

On this page

# Authenticating API requests

caution

LTIAAS API endpoints **must** only be called from your application's back-end. Authenticated API requests will include your API key, so making them from the front-end might result in your credentials getting leaked.

## Ltik based authentication[​](#ltik-based-authentication "Direct link to heading")

![Using ltik token to access the LTIAAS API](/assets/ideal-img/flow_ltik.fea24ac.1118.png)

![Using ltik token to access the LTIAAS API](/assets/ideal-img/flow_ltik_dark.9f75f8c.1118.png)

Using ltik token to access the LTIAAS API

During an LTI® launch, LTIAAS will perform the LTI® protocol authentication flow and then redirect the user to your application, this redirection will also append a query parameter called `ltik` to your account's registered target launch URL:

> [https://your.tool.com/launch?ltik=eyJhbGciOiJIUzI1NiIs](https://your.tool.com/launch?ltik=eyJhbGciOiJIUzI1NiIs)...

This token represents a single LTI® launch and allows LTIAAS to store and retrieve information specific to that launch context. You can then combine your account's `API Key` and the `ltik` token received to build the following authorization header:

```
Authorization: LTIK-AUTH-V2 <API_KEY>:<LTIK>
```

Example:

```
Authorization: LTIK-AUTH-V2 df06d55e-3b0f-4121-b60f-c39469b5b550:eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0
```

caution

The `ltik` token represents a single LTI® launch, therefore each token must only be used in requests made within the same launch context in which it was generated. Using an `ltik` token outside of its originating context can cause unexpected behavior and provide outdated information.

caution

Due to the nature of LTI®, the ID Token related to a launch should not be trusted after some time, for this reason each `ltik` token **expires after 24 hours.**

The ltik based authentication schema is accepted by all of the LTIAAS service API endpoints.

## Service key based authentication[​](#service-key-based-authentication "Direct link to heading")

![Using service key to access the LTIAAS API](/assets/ideal-img/flow_service_key.d7bcfd1.1142.png)

![Using service key to access the LTIAAS API](/assets/ideal-img/flow_service_key_dark.799c6b9.1142.png)

Using service key to access the LTIAAS API

If you need to make API requests outside of the context of an LTI® launch, you can use the service key based authentication schema.

caution

Due to the nature of LTI®, it's recommended to always utilize the services synchoronously, within the context of an LTI® launch. For most use cases it should be enough and a lot easier to trigger periodic tasks when someone launches to your tool.

After receiving an LTI® launch you can use the [ltik based authentication](#ltik-based-authentication) to [retrieve an ID Token](/guides/api/idtoken). If the current LTI® launch context has access to at least one of the *Assignment and Grades* or *Names and Roles Provisioning* LTI® services, the ID Token you retrieved will have an `idtoken.services.serviceKey` field.

```
// Building Ltik based API authentication header  
const authorizationHeader = `LTIK-AUTH-V2 ${API_KEY}:${LTIK}`  
const headers = { Authorization: authorizationHeader }  
// Making /api/idtoken GET request  
const response = requests.get('https://your.ltiaas.com/api/idtoken', { headers })  
// Retrieving service key  
const serviceKey = response['services']['serviceKey']
```

You can then combine your account's `API Key` with the `serviceKey` retrieved to build the following authorization header.

```
Authorization: SERVICE-AUTH-V1 <API_KEY>:<SERVICE_KEY>
```

Example:

```
Authorization: SERVICE-AUTH-V1 df06d55e-3b0f-4121-b60f-c39469b5b550:eyJhbGcieyJzdWIiOiIxMjM0.OiJIUzI1NiIsInR5cCI6IkpXVCJ9
```

info

Unlike the `ltik` token, the `serviceKey` will not expire after 24 hours and can be used outside of an LTI® launch. This allows you to, for example, run a cron job to synchronize grades once a day.

It's important to note that each `serviceKey` represents a single LTI® launch context, which usually translates to an activity in the LMS. So you need to be mindful of that when storing and using these tokens. Calling the API using a certain `serviceKey` will yield results from the launch context that it's associated with.

tip

You can learn more about using the service key based API authentication method in the [Accessing the API asynchronously guide](/guides/api/async).

## Bearer API key based authentication[​](#bearer-api-key-based-authentication "Direct link to heading")

A select few API endpoints are not related to an LTI launch context, such as during dynamic registration. Therefore, an LTIK or service key is not available. Only the API key needs to be sent in the form of a Bearer token.

```
Authorization: Bearer <API_KEY>
```

Example:

```
Authorization: Bearer df06d55e-3b0f-4121-b60f-c39469b5b550
```

**Tags:**

-   [API](/tags/api)
-   [Authentication](/tags/authentication)
-   [Tutorials](/tags/tutorials)
</file>

<file path="ltiaas-guides-docs/guides/api/authentication#ltik-based-authentication/index.md">
---
title: Authenticating API requests
url: https://docs.ltiaas.com/guides/api/authentication#ltik-based-authentication
source: LTIaaS Documentation
---

# Authenticating API requests

-   [](/)
-   [Using the LTIAAS API](/guides/api/introduction)
-   Authenticating API requests

On this page

# Authenticating API requests

caution

LTIAAS API endpoints **must** only be called from your application's back-end. Authenticated API requests will include your API key, so making them from the front-end might result in your credentials getting leaked.

## Ltik based authentication[​](#ltik-based-authentication "Direct link to heading")

![Using ltik token to access the LTIAAS API](/assets/ideal-img/flow_ltik.fea24ac.1118.png)

![Using ltik token to access the LTIAAS API](/assets/ideal-img/flow_ltik_dark.9f75f8c.1118.png)

Using ltik token to access the LTIAAS API

During an LTI® launch, LTIAAS will perform the LTI® protocol authentication flow and then redirect the user to your application, this redirection will also append a query parameter called `ltik` to your account's registered target launch URL:

> [https://your.tool.com/launch?ltik=eyJhbGciOiJIUzI1NiIs](https://your.tool.com/launch?ltik=eyJhbGciOiJIUzI1NiIs)...

This token represents a single LTI® launch and allows LTIAAS to store and retrieve information specific to that launch context. You can then combine your account's `API Key` and the `ltik` token received to build the following authorization header:

```
Authorization: LTIK-AUTH-V2 <API_KEY>:<LTIK>
```

Example:

```
Authorization: LTIK-AUTH-V2 df06d55e-3b0f-4121-b60f-c39469b5b550:eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0
```

caution

The `ltik` token represents a single LTI® launch, therefore each token must only be used in requests made within the same launch context in which it was generated. Using an `ltik` token outside of its originating context can cause unexpected behavior and provide outdated information.

caution

Due to the nature of LTI®, the ID Token related to a launch should not be trusted after some time, for this reason each `ltik` token **expires after 24 hours.**

The ltik based authentication schema is accepted by all of the LTIAAS service API endpoints.

## Service key based authentication[​](#service-key-based-authentication "Direct link to heading")

![Using service key to access the LTIAAS API](/assets/ideal-img/flow_service_key.d7bcfd1.1142.png)

![Using service key to access the LTIAAS API](/assets/ideal-img/flow_service_key_dark.799c6b9.1142.png)

Using service key to access the LTIAAS API

If you need to make API requests outside of the context of an LTI® launch, you can use the service key based authentication schema.

caution

Due to the nature of LTI®, it's recommended to always utilize the services synchoronously, within the context of an LTI® launch. For most use cases it should be enough and a lot easier to trigger periodic tasks when someone launches to your tool.

After receiving an LTI® launch you can use the [ltik based authentication](#ltik-based-authentication) to [retrieve an ID Token](/guides/api/idtoken). If the current LTI® launch context has access to at least one of the *Assignment and Grades* or *Names and Roles Provisioning* LTI® services, the ID Token you retrieved will have an `idtoken.services.serviceKey` field.

```
// Building Ltik based API authentication header  
const authorizationHeader = `LTIK-AUTH-V2 ${API_KEY}:${LTIK}`  
const headers = { Authorization: authorizationHeader }  
// Making /api/idtoken GET request  
const response = requests.get('https://your.ltiaas.com/api/idtoken', { headers })  
// Retrieving service key  
const serviceKey = response['services']['serviceKey']
```

You can then combine your account's `API Key` with the `serviceKey` retrieved to build the following authorization header.

```
Authorization: SERVICE-AUTH-V1 <API_KEY>:<SERVICE_KEY>
```

Example:

```
Authorization: SERVICE-AUTH-V1 df06d55e-3b0f-4121-b60f-c39469b5b550:eyJhbGcieyJzdWIiOiIxMjM0.OiJIUzI1NiIsInR5cCI6IkpXVCJ9
```

info

Unlike the `ltik` token, the `serviceKey` will not expire after 24 hours and can be used outside of an LTI® launch. This allows you to, for example, run a cron job to synchronize grades once a day.

It's important to note that each `serviceKey` represents a single LTI® launch context, which usually translates to an activity in the LMS. So you need to be mindful of that when storing and using these tokens. Calling the API using a certain `serviceKey` will yield results from the launch context that it's associated with.

tip

You can learn more about using the service key based API authentication method in the [Accessing the API asynchronously guide](/guides/api/async).

## Bearer API key based authentication[​](#bearer-api-key-based-authentication "Direct link to heading")

A select few API endpoints are not related to an LTI launch context, such as during dynamic registration. Therefore, an LTIK or service key is not available. Only the API key needs to be sent in the form of a Bearer token.

```
Authorization: Bearer <API_KEY>
```

Example:

```
Authorization: Bearer df06d55e-3b0f-4121-b60f-c39469b5b550
```

**Tags:**

-   [API](/tags/api)
-   [Authentication](/tags/authentication)
-   [Tutorials](/tags/tutorials)
</file>

<file path="ltiaas-guides-docs/guides/api/authentication#service-key-based-authentication/index.md">
---
title: Authenticating API requests
url: https://docs.ltiaas.com/guides/api/authentication#service-key-based-authentication
source: LTIaaS Documentation
---

# Authenticating API requests

-   [](/)
-   [Using the LTIAAS API](/guides/api/introduction)
-   Authenticating API requests

On this page

# Authenticating API requests

caution

LTIAAS API endpoints **must** only be called from your application's back-end. Authenticated API requests will include your API key, so making them from the front-end might result in your credentials getting leaked.

## Ltik based authentication[​](#ltik-based-authentication "Direct link to heading")

![Using ltik token to access the LTIAAS API](/assets/ideal-img/flow_ltik.fea24ac.1118.png)

![Using ltik token to access the LTIAAS API](/assets/ideal-img/flow_ltik_dark.9f75f8c.1118.png)

Using ltik token to access the LTIAAS API

During an LTI® launch, LTIAAS will perform the LTI® protocol authentication flow and then redirect the user to your application, this redirection will also append a query parameter called `ltik` to your account's registered target launch URL:

> [https://your.tool.com/launch?ltik=eyJhbGciOiJIUzI1NiIs](https://your.tool.com/launch?ltik=eyJhbGciOiJIUzI1NiIs)...

This token represents a single LTI® launch and allows LTIAAS to store and retrieve information specific to that launch context. You can then combine your account's `API Key` and the `ltik` token received to build the following authorization header:

```
Authorization: LTIK-AUTH-V2 <API_KEY>:<LTIK>
```

Example:

```
Authorization: LTIK-AUTH-V2 df06d55e-3b0f-4121-b60f-c39469b5b550:eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0
```

caution

The `ltik` token represents a single LTI® launch, therefore each token must only be used in requests made within the same launch context in which it was generated. Using an `ltik` token outside of its originating context can cause unexpected behavior and provide outdated information.

caution

Due to the nature of LTI®, the ID Token related to a launch should not be trusted after some time, for this reason each `ltik` token **expires after 24 hours.**

The ltik based authentication schema is accepted by all of the LTIAAS service API endpoints.

## Service key based authentication[​](#service-key-based-authentication "Direct link to heading")

![Using service key to access the LTIAAS API](/assets/ideal-img/flow_service_key.d7bcfd1.1142.png)

![Using service key to access the LTIAAS API](/assets/ideal-img/flow_service_key_dark.799c6b9.1142.png)

Using service key to access the LTIAAS API

If you need to make API requests outside of the context of an LTI® launch, you can use the service key based authentication schema.

caution

Due to the nature of LTI®, it's recommended to always utilize the services synchoronously, within the context of an LTI® launch. For most use cases it should be enough and a lot easier to trigger periodic tasks when someone launches to your tool.

After receiving an LTI® launch you can use the [ltik based authentication](#ltik-based-authentication) to [retrieve an ID Token](/guides/api/idtoken). If the current LTI® launch context has access to at least one of the *Assignment and Grades* or *Names and Roles Provisioning* LTI® services, the ID Token you retrieved will have an `idtoken.services.serviceKey` field.

```
// Building Ltik based API authentication header  
const authorizationHeader = `LTIK-AUTH-V2 ${API_KEY}:${LTIK}`  
const headers = { Authorization: authorizationHeader }  
// Making /api/idtoken GET request  
const response = requests.get('https://your.ltiaas.com/api/idtoken', { headers })  
// Retrieving service key  
const serviceKey = response['services']['serviceKey']
```

You can then combine your account's `API Key` with the `serviceKey` retrieved to build the following authorization header.

```
Authorization: SERVICE-AUTH-V1 <API_KEY>:<SERVICE_KEY>
```

Example:

```
Authorization: SERVICE-AUTH-V1 df06d55e-3b0f-4121-b60f-c39469b5b550:eyJhbGcieyJzdWIiOiIxMjM0.OiJIUzI1NiIsInR5cCI6IkpXVCJ9
```

info

Unlike the `ltik` token, the `serviceKey` will not expire after 24 hours and can be used outside of an LTI® launch. This allows you to, for example, run a cron job to synchronize grades once a day.

It's important to note that each `serviceKey` represents a single LTI® launch context, which usually translates to an activity in the LMS. So you need to be mindful of that when storing and using these tokens. Calling the API using a certain `serviceKey` will yield results from the launch context that it's associated with.

tip

You can learn more about using the service key based API authentication method in the [Accessing the API asynchronously guide](/guides/api/async).

## Bearer API key based authentication[​](#bearer-api-key-based-authentication "Direct link to heading")

A select few API endpoints are not related to an LTI launch context, such as during dynamic registration. Therefore, an LTIK or service key is not available. Only the API key needs to be sent in the form of a Bearer token.

```
Authorization: Bearer <API_KEY>
```

Example:

```
Authorization: Bearer df06d55e-3b0f-4121-b60f-c39469b5b550
```

**Tags:**

-   [API](/tags/api)
-   [Authentication](/tags/authentication)
-   [Tutorials](/tags/tutorials)
</file>

<file path="ltiaas-guides-docs/guides/api/deeplinking/index.md">
---
title: Performing Deep Linking
url: https://docs.ltiaas.com/guides/api/deeplinking
source: LTIaaS Documentation
---

# Performing Deep Linking

-   [](/)
-   [Using the LTIAAS API](/guides/api/introduction)
-   Performing Deep Linking

On this page

# Performing Deep Linking

tip

Make sure you've read about [authenticating API requests](/guides/api/authentication) before proceeding to the guide below.

info

The Deep Linking endpoint only accepts the [ltik based authentication method](/guides/api/authentication#ltik-based-authentication).

If your application is a hub of multiple resources and/or activities, the LTI® protocol makes this easy to manage through the *Deep Linking* service. You can use this service to allow teachers and administrators to select one specific resource from your application when creating a resource link (activity) in the LMS. LTIAAS gives you access to this service through the Deep Linking flow and `/api/deeplinking/form` API endpoint.

![Performing Deep Linking](/assets/ideal-img/flow_deeplinking.357dd10.1162.png)

![Performing Deep Linking](/assets/ideal-img/flow_deeplinking_dark.a5220b2.1162.png)

Performing Deep Linking

## The Deep Linking flow[​](#the-deep-linking-flow "Direct link to heading")

The LTI® Deep Linking flow consists of 4 steps:

-   [Deep Linking launch](#deep-linking-launch);
-   [User content selection](#user-content-selection);
-   [Creation of deep linking form](#creation-of-deep-linking-form);
-   [Submission of selected content](#submission-of-selected-content).

### Deep Linking launch[​](#deep-linking-launch "Direct link to heading")

An LTI® Deep Linking launch happens when a privileged user within the LMS, usually administrator or teacher, launches to your LTI® tool from an activity or tool link creation page. This launch works in the same way as the regular LTI® launch, with the exception that, at the end of the flow, LTIAAS will redirect the user to your application's registered deep linking target launch URL.

After receiving the Deep Linking launch, your application should display a content selection view.

tip

Your application can display a personalized view for the user that initiated the LTI® launch based on their access level and role. To know more about this, check our [Retrieving ID Token guide](/guides/api/idtoken) and its [Performing SSO section](/guides/api/idtoken#performing-sso).

### User content selection[​](#user-content-selection "Direct link to heading")

![Example content selection view](/assets/ideal-img/select_content.880e764.1152.png)

Example content selection view

In the content selection view, the user will be able to choose which resource provided by your application should be linked to the activity being created.

After the user selects the desired resource, your application's front-end should make a request to your back-end identifying the selection.

### Creation of deep linking form[​](#creation-of-deep-linking-form "Direct link to heading")

info

This guide focuses on the most common and/or relevant fields of each section in the deep linking request body, for a full list of available fields, as well as possible API response bodies and statuses, check the [Deep Linking endpoint API reference](/api/post-api-deeplinking-form).

#### The content item object[​](#the-content-item-object "Direct link to heading")

A content item represents a resource that should be added to the LMS. Only the `type` field is always required to be present in this object, the other fields might be required or optional depending on the type of resource being added.

tip

You can find a full list of available types and their respective required fields in the IMS Deep Linking Content Item Types Documentation:

Learning Tools Interoperability (LTI®) Deep Linking Specification, IMS Final Release Spec Version 2.0, 1EdTech Consortium, April 2019, Section 3, [https://www.imsglobal.org/node/162911#content-item-types](https://www.imsglobal.org/node/162911#content-item-types).

The most common type of content item is the `ltiResourceLink`, which represents an LTI® link to a resource in your application, usually in the form of an activity. For this type of content item, the `type` and `url` fields are **required**.

```
{  
  "type": "ltiResourceLink",  "url": "https://your.ltiaas.com/lti/launch?resource=123",  "title": "Resource"}
```

tip

It's common to provide a `title` field that most LMSes will use as the activity title.

#### Building the content item URL[​](#building-the-content-item-url "Direct link to heading")

The `ltiResourceLink` content item `url` field is the target the LMS should redirect the user to after a successful LTI® launch from the newly created activity.

caution

For the LTI® launch to work from the new activity, the `url` field of the content item **MUST** point to your LTIAAS subdomain launch URL `https://your.ltiaas.com/lti/launch`.

You can add any query parameters you want to the content item URL, as they will be passed along to your application's registered launch URL during subsequent LTI® launches. These parameters can be used to identify the resource linked to the activity.

**Content item URL:**

> [https://your.ltiaas.com/lti/launch?resource=123](https://your.ltiaas.com/lti/launch?resource=123)

**Final target URL after LTI® launch:**

> [https://your.application.com/your-launch-endpoint?resource=123](https://your.application.com/your-launch-endpoint?resource=123)

#### Calling the Deep Linking endpoint[​](#calling-the-deep-linking-endpoint "Direct link to heading")

After your back-end receives the request containing the user's selection, you can call the `/api/deeplinking/form` endpoint to create a self-submitting form that will be used to submit the selection and finalize the flow.

The Deep Linking endpoint accepts a POST request with a JSON body containing the `contentItems` field. This field is an array of content item objects that represent a resource that should added to the LMS, potentially being created as an activity.

tip

The LTI® protocol allows you to pass multiple content items in a deep liking request, but it's common for LMSes to accept only one since this flow is often connected to the creation of an activity.

```
// Building Ltik based API authentication header  
const authorizationHeader = `LTIK-AUTH-V2 ${API_KEY}:${LTIK}`  
const headers = { Authorization: authorizationHeader }  
// Making /api/deeplinking/form POST request  
const body = {  
  contentItems: [{    type: 'ltiResourceLink',    url: 'https://your.ltiaas.com/lti/launch?resource=123',    title: 'Resource'  }]}  
const response = requests.post(`https://your.ltiaas.com/api/deeplinking/form`, body, { headers })  
const form = response['form']  
return form
```

The `/api/deeplinking/form` endpoint response is an object containing a `form` field that is an HTML snippet that should be added to your application's HTML body to finalize the deep linking process.

```
{  
  "form": "<form id='ltiaas_dl' style='display: none;' action='...' method='POST'>              <input type='hidden' name='JWT' value='eyJhbGciOiJIUzI1NiIkpXVCJ9.eyJzdODkwIiwib...' />           </form>           <script>              document.getElementById('ltiaas_dl').submit()           </script>"}
```

#### Creating your own submission form[​](#creating-your-own-submission-form "Direct link to heading")

If you want to create your own form instead of using the one provided by the Deep Linking form endpoint, you can do so by making a POST request to the `/api/deeplinking` endpoint. This endpoint accepts the same request body as the `/api/deeplinking/form` endpoint, but instead of returning a self-submitting form, it returns a JSON object containing the `message` and `target` fields.

```
{  
  "message": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwib...",  "target": "https://lms.example.com/lti/deeplinking"}
```

The `message` field is a JWT containing the selected resource information and the `target` field is the submission endpoint for the form. You can use this information to create your own submission form:

```
const form = `<form id="ltiaas_dl" style="display: none;" action="${target}" method="POST">  
                <input type="hidden" name="JWT" value="${message}" />              </form>              <script>                document.getElementById("ltiaas_dl").submit()              </script>`return form
```

### Submission of selected content[​](#submission-of-selected-content "Direct link to heading")

After your application's back-end makes the API request to generate the self-submitting form, your front-end should append the resulting HTML snippet to the body:

```
// Back-end  
// ...  
const form = response['form']  
return form  

// Front-end  
// Append self-submitting form to HTML body  
$('body').append(form)
```

The form will then submit itself, finalizing the deep linking process and often closing the dialogue window.

## Checking service availability[​](#checking-service-availability "Direct link to heading")

The *Deep Linking* service will only be available in the context of deep linking LTI® launches. Before attempting to submit resources you can [make a call to the ID Token endpoint](/guides/api/idtoken) and check the [services section](/guides/api/idtoken#deeplinking) to know if the service is available.

You can know if the service is available based on the value of the `idtoken.services.deepLinking.available` boolean field:

```
// Building Ltik based API authentication header  
const authorizationHeader = `LTIK-AUTH-V2 ${API_KEY}:${LTIK}`  
const headers = { Authorization: authorizationHeader }  
// Making /api/idtoken GET request  
const idtoken = requests.get('https://your.ltiaas.com/api/idtoken', { headers })  
const isServiceAvailable = idtoken['services']['deepLinking']['available']  

if (isServiceAvailable) {  
  // Making /api/deeplinking/form POST request  const body = {    contentItems: [{      type: 'ltiResourceLink',      url: 'https://your.ltiaas.com/lti/launch?resource=123',      title: 'Resource'    }]  }  const response = requests.post(`https://your.ltiaas.com/api/deeplinking/form`, body, { headers })  const form = response['form']  return form}
```

**Tags:**

-   [API](/tags/api)
-   [Deep Linking](/tags/deep-linking)
-   [Tutorials](/tags/tutorials)
</file>

<file path="ltiaas-guides-docs/guides/api/dynamic-registration/index.md">
---
title: Performing Dynamic Registration
url: https://docs.ltiaas.com/guides/api/dynamic-registration
source: LTIaaS Documentation
---

# Performing Dynamic Registration

-   [](/)
-   [Using the LTIAAS API](/guides/api/introduction)
-   Performing Dynamic Registration

On this page

# Performing Dynamic Registration

tip

Make sure you've read about [authenticating API requests](/guides/api/authentication) before proceeding to the guide below.

info

The Dynamic Registrations API endpoints only accept the [bearer api key based authentication method](/guides/api/authentication#bearer-api-key-based-authentication).

## How Dynamic Registration Works[​](#how-dynamic-registration-works "Direct link to heading")

LTI® Dynamic Registration is used to automate the LMS/tool registration process. Several LMSes support it, including [Canvas](/guides/api/guides/lms/canvas#dynamic-registration), [Moodle](/guides/lms/moodle#dynamic-registration), and [Brightspace](/guides/lms/brightspace#dynamic-registration). The default Dynamic Registration process is as follows:

1.  The LMS administrator enters your dynamic registration URL into their LMS: `https://your.ltiaas.com/lti/register`
2.  LTIAAS communicates with the LMS and completes the registration process automatically.
3.  (optional) The LMS administrator can open the registered tool and modify any pre-defined settings as needed.

In some cases, it is not desirable to allow specific users or LMSes to register your tool. There are two general scenarios that might require approval/intervention while doing dynamic registration:

1.  **Simple Approval**: If you want to allow any user to register your tool, but want to manually approve each registration before it can be used, you can simply enable the `Dynamic Registration Auto-Activation` feature in the LTIAAS Portal within the *API Settings* page.
2.  **Account Authentication or Payment**: You might want to require the user to login to your service or submit payment before allowing the registration to complete. LTIAAS has APIs that enable this flow that we call *Dynamic Registration Pre-Approval*.

info

If all you need is *simple approval*, you can stop reading here.

## The Pre-Approval Flow[​](#the-pre-approval-flow "Direct link to heading")

tip

The *Dynamic Registration Pre-Approval* flow is disabled by default. It can be enabled in the LTIAAS Portal under the *API Settings* page by enabling the `Enable Pre-Approval` option.

The LTIAAS *Dynamic Registration Pre-Approval* flow consists of 4 steps:

-   [Initiate Dynamic Registration](#initiate-dynamic-registration)
-   [Pre-Approval Redirection](#intermediate-target-redirection)
-   [Get Registration Data](#get-registration-data)
-   [Submission of registration approval and/or settings override](#submission-of-registration-approval-and-settings-override)

![Performing Dynamic Registration With An Pre-Approval](/assets/ideal-img/flow_dynreg.b6c074b.592.png)

![Performing Dynamic Registration With An Pre-Approval](/assets/ideal-img/flow_dynreg_dark.47f33e3.590.png)

Performing Dynamic Registration With An Pre-Approval

### Initiate Dynamic Registration[​](#initiate-dynamic-registration "Direct link to heading")

Just like in the *'vanilla'* dynamic registration described above, the LMS administrator initiates Dynamic Registration by entering the Dynamic Registration URL into their LMS: `https://your.ltiaas.com/lti/register`.

### Pre-Approval Redirection[​](#pre-approval-redirection "Direct link to heading")

Because the `Enable Pre-Approval` option is true, the user is redirected to the URL you entered into the `Pre-Approval URL` field of the *API Settings* page. This page will receive a query parameter called `registrationId`. For example:

`https://yoursite.com/intermediateTarget?registrationId=123`

You will use the `registrationId` to get information about the LMS and complete/approve the registration process.

### Get Registration Data[​](#get-registration-data "Direct link to heading")

Once LTIAAS has redirected to your `Pre-Approval URL`, you can use the `registrationId` query parameter to get information about the LMS using the [Get Registrations API](/api/get-api-registrations).

```
// Building Bearer API authentication header  
const authorizationHeader = `Bearer ${API_KEY}`  
const headers = { Authorization: authorizationHeader }  
// Get the registrationId (from the front-end)  
const registrationId = req.query.registrationId  
// Making /api/registrations GET request (called in your back-end)  
const response = requests.get(`https://your.ltiaas.com/api/registrations/${registrationId}`, { headers })  
const url = response['url']  
const lmsFamily = response['familyCode']  
//... and other data
```

A successful response will contain details about the LMS and the options it supports.

```
{  
  "url": "https://moodle.ltiaas.com",  "familyCode": "moodle",  "version": "4.4.1+ (Build: 20240705)",  "supportedScopes": [    "https://purl.imsglobal.org/spec/lti-bo/scope/basicoutcome",    "https://purl.imsglobal.org/spec/lti-ags/scope/lineitem.readonly",    "https://purl.imsglobal.org/spec/lti-ags/scope/result.readonly",    "https://purl.imsglobal.org/spec/lti-ags/scope/score",    "https://purl.imsglobal.org/spec/lti-ags/scope/lineitem",    "https://purl.imsglobal.org/spec/lti-nrps/scope/contextmembership.readonly",    "https://purl.imsglobal.org/spec/lti-ts/scope/toolsetting",    "openid"  ],  "supportedMessages": [    {      "type": "LtiResourceLinkRequest"    },    {      "type": "LtiDeepLinkingRequest",      "placements": [        "ContentArea"      ]    }  ]}
```

caution

The `registrationId` parameter is not persistent. It can only be used to get information about a potential registration and to complete a registration. Once the registration is completed or abandoned, the registrationId will no longer work.

### Submission of registration approval and settings override[​](#submission-of-registration-approval-and-settings-override "Direct link to heading")

During the dynamic registration process, you are free to redirect to other pages on your site, for example to allow the user to log in. It is important to not leave the context of the dynamic registration iframe, because the iframe is used by LTIAAS to communicate with the LMS.

When you are ready to approve the registration, you can use the [Complete Registration API](/api/post-api-registrations-complete).

```
// Building Bearer API authentication header  
const authorizationHeader = `Bearer ${API_KEY}`  
const headers = { Authorization: authorizationHeader }  
// Get the registrationId  
const registrationId = req.query.registrationId  
// build the registration completion message  
const body = {  
  // These are all optional, defaulting to the stored values set in the LTIAAS Portal  platformName: 'Platform name',  autoActivate: true,  
  messages: [    { type: 'LtiResourceLinkRequest', placements: ['placement1'] },    { type: 'LtiDeepLinkingRequest', placements: ['placement2'] }    // LTIAAS will validate each of these placements, only sending the ones allowed by the LMS  ]}  
// Making /api/registrations POST request  
const response = requests.post(`https://your.ltiaas.com/api/registrations/${registrationId}/complete`, body, { headers })  
const htmlToInject = response['html']  
return htmlToInject
```

This will return an html snippet that needs to be appended to the document that is in the active iframe for this registration.

```
{  
  platformId: "A2F48n9Ss8Hjpw4gjo0",  html: "<script>(window.opener || window.parent).postMessage({subject:'org.imsglobal.lti.close'}, '*');</script>"}
```

tip

The `platformId` that is returned in this step is persistent. It can be used later on to update, activate, or deactivate the platform registration.

Here's an example of completing the process by appending the html snippet to the active iframe's document body.

```
// Front-end  
// Append returned script to HTML body  
$('body').append(htmlToInject)
```

## Platform Registration Management[​](#platform-registration-management "Direct link to heading")

Once dynamic registration (or manual registration) is complete, you can use the platformId to manipulate the registration via the `/admin/platforms` API. See our [Platforms API reference](/api/ltiaas) for more information.

**Tags:**

-   [API](/tags/api)
-   [Dynamic Registration](/tags/dynamic-registration)
-   [Tutorials](/tags/tutorials)
</file>

<file path="ltiaas-guides-docs/guides/api/idtoken/index.md">
---
title: Retrieving the ID Token
url: https://docs.ltiaas.com/guides/api/idtoken
source: LTIaaS Documentation
---

# Retrieving the ID Token

-   [](/)
-   [Using the LTIAAS API](/guides/api/introduction)
-   Retrieving the ID Token

On this page

# Retrieving the ID Token

tip

Make sure you've read about [authenticating API requests](/guides/api/authentication) before proceeding to the guide below.

info

The ID Token endpoint only accepts the [ltik based API authentication method](/guides/api/authentication#ltik-based-authentication).

The ID Token is the main piece of data in the LTI® protocol, it's sent by the LMS to the LTI® tool and contains information regarding the current LTI® launch, this includes user information, LMS information, launch context information and everything you need to use the many LTI® services.

LTIAAS gives you access to a launch specific ID Token, formatted for easy of use, through the `/api/idtoken` API endpoint.

![Retrieving ID Token](/assets/ideal-img/flow_idtoken.41ed26f.1118.png)

![Retrieving ID Token](/assets/ideal-img/flow_idtoken_dark.f622c04.1118.png)

Retrieving ID Token

## Calling the ID Token endpoint[​](#calling-the-id-token-endpoint "Direct link to heading")

To retrieve the ID Token related to an LTI® launch, you need to make a GET request to the `/api/idtoken` endpoint of your LTIAAS' account subdomain.

```
// Building Ltik based API authentication header  
const authorizationHeader = `LTIK-AUTH-V2 ${API_KEY}:${LTIK}`  
const headers = { Authorization: authorizationHeader }  
// Making /api/idtoken GET request  
const response = requests.get('https://your.ltiaas.com/api/idtoken', { headers })  
const userInfo = response['user']  
const lmsInfo = response['platform']  
const launchInfo = response['launch']  
const servicesInfo = response['services']
```

You now have everything you need to [perform SSO and let users into your application](#performing-sso).

## Structure of the LTIAAS ID Token[​](#structure-of-the-ltiaas-id-token "Direct link to heading")

info

This guide focuses on the most common and/or relevant fields of each section in the ID Token object, for a full list of fields currently supported, as well as possible API response bodies and statuses, check the [\[GET\] ID Token endpoint API reference](/api/get-idtoken).

LTIAAS formats the raw ID Token sent by the LMS into a developer-friendly format, separating the claims into helpful sections and giving them more human-readable names:

```
{  
  "ltiVersion": "1.3.0",  "user": {...},  "platform": {...},  "launch": {...},  "services": {...}}
```

### User section[​](#user-section "Direct link to heading")

The `user` section in the LTIAAS ID Token is an object containing information provided by the LMS regarding the user that initiated a specific LTI® launch:

```
{  
  "ltiVersion": "1.3.0",  "user": {    "id": "2",    "email": "john@lms.com",    "name": "John Doe",    "givenName": "John",    "familyName": "Doe",    "roles": [      "http://purl.imsglobal.org/vocab/lis/v2/system/person#Administrator"    ],    ...  },  ...}
```

info

Fields containing personal information like `name` and `email` might not be present in the ID Token. The LMS can choose to omit this information based on their privacy rules. The only fields guaranteed to be present in this section are `id` and `roles`.

#### id[​](#id "Direct link to heading")

The `id` field contains the user's identifier inside of the LMS. This ID will probably not be unique between LMSes, so it's not recommended to be used alone as a primary identifier. We go into more detail on this topic in the [performing SSO section](#performing-sso).

#### email[​](#email "Direct link to heading")

The `email` field contains the user's registered email inside of the LMS.

#### name, givenName and familyName[​](#name-givenname-and-familyname "Direct link to heading")

The `name`, `givenName` and `familyName` fields contain the user's registered full name, first last and last name respectively.

#### roles[​](#roles "Direct link to heading")

The `roles` field contains a list of the user's roles within this specific launch context.

tip

A list of all possible roles can be found in the IMS Role Vocabulary:

Learning Tools Interoperability (LTI®) Core Specification, IMS Final Release Spec Version 1.3, 1EdTech Consortium, April 2019, A.2 Role vocabularies, [https://www.imsglobal.org/node/162741#role-vocabularies](https://www.imsglobal.org/node/162741#role-vocabularies).

You can choose to customize your tool's view based on the roles present in this list, for example, showing additional options for user's with variations of the `Instructor` role.

### Platform section[​](#platform-section "Direct link to heading")

The `platform` section in the LTIAAS ID Token is an object containing information regarding the LMS that originated a specific LTI® launch:

```
{  
  "ltiVersion": "1.3.0",  "platform": {    "id": "Y9LENU9n911EMxp9QSrE",    "url": "https://lms.example.com",    "clientId": "KzJtrQxEUYGWXjx",    "deploymentId": "1",    "name": "LMS",    "description": "A great LMS",    "productFamilyCode": "lms",    "version": "2021051712",    ...  },  ...}
```

#### id[​](#id-1 "Direct link to heading")

The `id` field contains the LMS's registration ID inside LTIAAS, generated when you perform a platform registration. This ID is globally unique.

#### url[​](#url "Direct link to heading")

The `url` field contains the LMS's issuer URL. This will match the URL used in the platform registration.

#### clientId[​](#clientid "Direct link to heading")

The `clientId` field contains the identifier generated by LMS for your LTI® tool. This will match the client ID used in the platform registration.

#### deploymentId[​](#deploymentid "Direct link to heading")

The `deploymentId` field contains the identifier for one specific instance of the LMS. This is most relevant when dealing with an LMS that uses multi-tenancy (Blackboard, for example), since this means that every instance of this LMS will share a single platform registration. The deployment ID will allow you to track and/or control access between the various instances of such LMSes.

#### name and description[​](#name-and-description "Direct link to heading")

The `name` and `description` fields contain the LMS's name and description as used in the platform registration.

#### productFamilyCode[​](#productfamilycode "Direct link to heading")

The `productFamilyCode` field contains an identifier for that family of LMSes. This allows you to identify the type of LMS and maybe customize your tool accordingly. Common examples are: `moodle`, `canvas` and `BlackboardLearn`.

#### version[​](#version "Direct link to heading")

The `version` field contains the LMS version inside its own versioning system.

### Launch section[​](#launch-section "Direct link to heading")

The `launch` section in the LTIAAS ID Token is an object containing information specific to the actual LTI® Launch:

```
{  
  "ltiVersion": "1.3.0",  "launch": {    "context": {...},    "resourceLink": {...},    "presentation": {...},    "custom": {...}  },  ...}
```

#### context[​](#context "Direct link to heading")

The `context` object contains information regarding the LMS context where the LTI® launch was originated. A context is most commonly the representation of a course in the LMS, but it can be any section from where an LTI® tool can be launched.

```
{  
  "launch": {    "context": {      "id": "2",      "label": "course",      "title": "Course",      "type": [        "CourseSection"      ]    },    ...  },  ...}
```

-   `id` - Context ID. Commonly the ID of a course in the LMS.
-   `label` and `title` - Context name. These two fields usually contain a short and full version of the context name respectively.
-   `type` - Context type.

tip

A list of all possible context types can be found in the IMS Context Type Vocabulary:

Learning Tools Interoperability Core Specification, IMS Final Release Spec Version 1.3, 1EdTech Consortium, April 2019, A.1 Context type vocabulary, [https://www.imsglobal.org/spec/lti/v1p3/#context-type-vocabulary](https://www.imsglobal.org/spec/lti/v1p3/#context-type-vocabulary).

#### resourceLink[​](#resourcelink "Direct link to heading")

The `resourceLink` object contains information regarding the LMS resource link that originated the current LTI® launch. A resource link is most commonly the representation of an activity in the LMS.

```
{  
  "launch": {    "resourceLink": {      "id": "4",      "title": "LTI® Activity 1",      "description": "This is a cool activity"    },    ...  },  ...}
```

-   `id` - Resource link ID. Commonly the ID of an activity in the LMS.
-   `title` - Resource link name.
-   `description` - Resource link description.

#### presentation[​](#presentation "Direct link to heading")

The `presentation` object contains information regarding how the current LTI® launch is being displayed.

```
{  
  "launch": {    "presentation": {      "documentTarget": "iframe",      "locale": "en"    },    ...  },  ...}
```

-   `documentTarget` - Type of LTI® tool visualization. Possible values for this field are `frame`, `iframe` or `window`.
-   `locale` - Language, country, and variant as represented using the [IETF Best Practices for Tags for Identifying Languages](https://www.rfc-editor.org/rfc/rfc5646).

#### custom[​](#custom "Direct link to heading")

The `custom` object contains key-value pairs representing the custom parameters defined in the LMS for that tool. Depending on the LMS you can set these custom parameters globally for a tool or specific to individual launches or locations inside the LMS. Some LMSes also support variable substitution.

```
{  
  "launch": {    "custom": {      "param": "value",      "location": "workspace"    },    ...  },  ...}
```

### Services section[​](#services-section "Direct link to heading")

The `services` section in the LTIAAS ID Token is an object containing information regarding the LTI® services and their availability in the context of a specific LTI® Launch:

```
{  
  "ltiVersion": "1.3.0",  "services": {    "deepLinking": {...},    "namesAndRoles": {...},    "assignmentAndGrades": {...},    "serviceKey": "eyJhbGciajsheu..."  },  ...}
```

#### deepLinking[​](#deeplinking "Direct link to heading")

The `deepLinking` object contains availability information for the *Deep Linking* LTI® service.

```
{  
  "services": {    "deepLinking": {      "available": false    },    ...  },  ...}
```

-   `available` - Availability status for the *Deep Linking* service in the current launch context.

#### namesAndRoles[​](#namesandroles "Direct link to heading")

The `namesAndRoles` object contains availability information for the *Names and Roles Provisioning* LTI® service.

```
{  
  "services": {    "namesAndRoles": {      "available": true    },    ...  },  ...}
```

-   `available` - Availability status for the *Names and Roles Provisioning* service in the current launch context.

#### assignmentAndGrades[​](#assignmentandgrades "Direct link to heading")

The `assignmentAndGrades` object contains availability information for the *Assignment and Grades* LTI® service.

```
{  
  "services": {    "assignmentAndGrades": {      "available": true,      "lineItemId": "https://lms.example.com/course/1/lineitems/1",    },    ...  },  ...}
```

-   `available` - Availability status for the *Assignment and Grades* service in the current launch context.
-   `lineItemId` - Line item ID for the current launch context. This field will only be present if there's only one line item ID associated with the current context.

#### serviceKey[​](#servicekey "Direct link to heading")

The `serviceKey` field contains the service key token that can be used to perform the [service key based API authentication](/guides/api/authentication#service-key-based-authentication). This field is only populated if the current launch context has access to at least one of the *Assignment and Grades* or *Names and Roles Provisioning* LTI® services.

## Additional fields and raw ID Token[​](#additional-fields-and-raw-id-token "Direct link to heading")

This guide focuses on the most common and/or relevant fields of each section in the ID Token object, for a full list of fields currently supported, check the [ID Token endpoint API reference](/api/get-idtoken).

info

If the field you need to build your LTI® integration is not one of the fields we take into account when formatting the ID Token, please fell free to [contact us](/contact-us) and we will make sure to include it in a future update.

Alternatively, you can retrieve a raw version of the ID Token generated by the LMS by sending the `?raw=true` query parameter when calling the `/api/idtoken` endpoint:

```
// Building Ltik based API authentication header  
const authorizationHeader = `LTIK-AUTH-V2 ${API_KEY}:${LTIK}`  
const headers = { Authorization: authorizationHeader }  
// Making /api/idtoken GET request  
const response = requests.get('https://your.ltiaas.com/api/idtoken?raw=true', { headers })  
const userID = response['sub']  
const userEmail = response['email']
```

The response will be an unformatted version of the ID Token object, including every field as sent by the LMS:

```
{  
  "sub": "2",  "iss": "https://lms.example.com",  "aud": "KzJtrQxEUYGWXjx",  "email": "john@lms.com",  "name": "John Doe",  "givenName": "John",  "familyName": "Doe",  "https://purl.imsglobal.org/spec/lti/claim/ext": {...},  "https://purl.imsglobal.org/spec/lti/claim/deployment_id": "1",  "https://purl.imsglobal.org/spec/lti/claim/version": "1.3.0",  "https://purl.imsglobal.org/spec/lti/claim/tool_platform": {...},  "https://purl.imsglobal.org/spec/lti/claim/custom": {...},  "https://purl.imsglobal.org/spec/lti/claim/launch_presentation": {...},  "https://purl.imsglobal.org/spec/lti/claim/roles": [...],  "https://purl.imsglobal.org/spec/lti/claim/context": {...},  "https://purl.imsglobal.org/spec/lti/claim/resource_link": {...},  ...}
```

## Performing SSO[​](#performing-sso "Direct link to heading")

After retrieving the ID Token, you can use the information contained in it to perform SSO and authenticate users into your application, automatically logging them into a preexisting account or provisioning a new one on the spot. There are two main ways of identifying a user:

### Identifying the user by their email[​](#identifying-the-user-by-their-email "Direct link to heading")

One of the quickest ways of identifying a user is through their email:

```
// Building Ltik based API authentication header  
const authorizationHeader = `LTIK-AUTH-V2 ${API_KEY}:${LTIK}`  
const headers = { Authorization: authorizationHeader }  
// Making /api/idtoken GET request  
const response = requests.get('https://your.ltiaas.com/api/idtoken', { headers })  
const userEmail = response['user']['email'] // user@email.com
```

The email contained in the ID Token can be trusted as an identifier for the user that initiated that specific LTI® launch.

caution

The `user.email` field might not be present in the ID Token. The LMS can choose to omit this information based on their privacy rules.

### Identifying the user by their ID[​](#identifying-the-user-by-their-id "Direct link to heading")

The most reliable way of identifying a user is through their ID reported in the ID Token. This ID is only unique within the LMS that originated the LTI® launch, so this value alone is not enough to represent a globally unique user. To get a globally unique identifier, you can combine the value of the user ID with the platform ID:

```
// Building Ltik based API authentication header  
const authorizationHeader = `LTIK-AUTH-V2 ${API_KEY}:${LTIK}`  
const headers = { Authorization: authorizationHeader }  
// Making /api/idtoken GET request  
const response = requests.get('https://your.ltiaas.com/api/idtoken', { headers })  
const platformID = response['platform']['id'] // Y9LENU9n911EMxp9QSrE  
const userID = response['user']['id'] // 2  
// Build globally unique user ID  
const globalUserID = `${platformID}:${userID}`
```

info

You could technically generate a more precise platform identifier by also combining the platform's deployment ID, however, this is largely unnecessary since user IDs should be unique across different instances of the same platform registration.

**Tags:**

-   [API](/tags/api)
-   [ID Token](/tags/id-token)
-   [Tutorials](/tags/tutorials)
</file>

<file path="ltiaas-guides-docs/guides/api/idtoken#assignmentandgrades/index.md">
---
title: Retrieving the ID Token
url: https://docs.ltiaas.com/guides/api/idtoken#assignmentandgrades
source: LTIaaS Documentation
---

# Retrieving the ID Token

-   [](/)
-   [Using the LTIAAS API](/guides/api/introduction)
-   Retrieving the ID Token

On this page

# Retrieving the ID Token

tip

Make sure you've read about [authenticating API requests](/guides/api/authentication) before proceeding to the guide below.

info

The ID Token endpoint only accepts the [ltik based API authentication method](/guides/api/authentication#ltik-based-authentication).

The ID Token is the main piece of data in the LTI® protocol, it's sent by the LMS to the LTI® tool and contains information regarding the current LTI® launch, this includes user information, LMS information, launch context information and everything you need to use the many LTI® services.

LTIAAS gives you access to a launch specific ID Token, formatted for easy of use, through the `/api/idtoken` API endpoint.

![Retrieving ID Token](/assets/ideal-img/flow_idtoken.41ed26f.1118.png)

![Retrieving ID Token](/assets/ideal-img/flow_idtoken_dark.f622c04.1118.png)

Retrieving ID Token

## Calling the ID Token endpoint[​](#calling-the-id-token-endpoint "Direct link to heading")

To retrieve the ID Token related to an LTI® launch, you need to make a GET request to the `/api/idtoken` endpoint of your LTIAAS' account subdomain.

```
// Building Ltik based API authentication header  
const authorizationHeader = `LTIK-AUTH-V2 ${API_KEY}:${LTIK}`  
const headers = { Authorization: authorizationHeader }  
// Making /api/idtoken GET request  
const response = requests.get('https://your.ltiaas.com/api/idtoken', { headers })  
const userInfo = response['user']  
const lmsInfo = response['platform']  
const launchInfo = response['launch']  
const servicesInfo = response['services']
```

You now have everything you need to [perform SSO and let users into your application](#performing-sso).

## Structure of the LTIAAS ID Token[​](#structure-of-the-ltiaas-id-token "Direct link to heading")

info

This guide focuses on the most common and/or relevant fields of each section in the ID Token object, for a full list of fields currently supported, as well as possible API response bodies and statuses, check the [\[GET\] ID Token endpoint API reference](/api/get-idtoken).

LTIAAS formats the raw ID Token sent by the LMS into a developer-friendly format, separating the claims into helpful sections and giving them more human-readable names:

```
{  
  "ltiVersion": "1.3.0",  "user": {...},  "platform": {...},  "launch": {...},  "services": {...}}
```

### User section[​](#user-section "Direct link to heading")

The `user` section in the LTIAAS ID Token is an object containing information provided by the LMS regarding the user that initiated a specific LTI® launch:

```
{  
  "ltiVersion": "1.3.0",  "user": {    "id": "2",    "email": "john@lms.com",    "name": "John Doe",    "givenName": "John",    "familyName": "Doe",    "roles": [      "http://purl.imsglobal.org/vocab/lis/v2/system/person#Administrator"    ],    ...  },  ...}
```

info

Fields containing personal information like `name` and `email` might not be present in the ID Token. The LMS can choose to omit this information based on their privacy rules. The only fields guaranteed to be present in this section are `id` and `roles`.

#### id[​](#id "Direct link to heading")

The `id` field contains the user's identifier inside of the LMS. This ID will probably not be unique between LMSes, so it's not recommended to be used alone as a primary identifier. We go into more detail on this topic in the [performing SSO section](#performing-sso).

#### email[​](#email "Direct link to heading")

The `email` field contains the user's registered email inside of the LMS.

#### name, givenName and familyName[​](#name-givenname-and-familyname "Direct link to heading")

The `name`, `givenName` and `familyName` fields contain the user's registered full name, first last and last name respectively.

#### roles[​](#roles "Direct link to heading")

The `roles` field contains a list of the user's roles within this specific launch context.

tip

A list of all possible roles can be found in the IMS Role Vocabulary:

Learning Tools Interoperability (LTI®) Core Specification, IMS Final Release Spec Version 1.3, 1EdTech Consortium, April 2019, A.2 Role vocabularies, [https://www.imsglobal.org/node/162741#role-vocabularies](https://www.imsglobal.org/node/162741#role-vocabularies).

You can choose to customize your tool's view based on the roles present in this list, for example, showing additional options for user's with variations of the `Instructor` role.

### Platform section[​](#platform-section "Direct link to heading")

The `platform` section in the LTIAAS ID Token is an object containing information regarding the LMS that originated a specific LTI® launch:

```
{  
  "ltiVersion": "1.3.0",  "platform": {    "id": "Y9LENU9n911EMxp9QSrE",    "url": "https://lms.example.com",    "clientId": "KzJtrQxEUYGWXjx",    "deploymentId": "1",    "name": "LMS",    "description": "A great LMS",    "productFamilyCode": "lms",    "version": "2021051712",    ...  },  ...}
```

#### id[​](#id-1 "Direct link to heading")

The `id` field contains the LMS's registration ID inside LTIAAS, generated when you perform a platform registration. This ID is globally unique.

#### url[​](#url "Direct link to heading")

The `url` field contains the LMS's issuer URL. This will match the URL used in the platform registration.

#### clientId[​](#clientid "Direct link to heading")

The `clientId` field contains the identifier generated by LMS for your LTI® tool. This will match the client ID used in the platform registration.

#### deploymentId[​](#deploymentid "Direct link to heading")

The `deploymentId` field contains the identifier for one specific instance of the LMS. This is most relevant when dealing with an LMS that uses multi-tenancy (Blackboard, for example), since this means that every instance of this LMS will share a single platform registration. The deployment ID will allow you to track and/or control access between the various instances of such LMSes.

#### name and description[​](#name-and-description "Direct link to heading")

The `name` and `description` fields contain the LMS's name and description as used in the platform registration.

#### productFamilyCode[​](#productfamilycode "Direct link to heading")

The `productFamilyCode` field contains an identifier for that family of LMSes. This allows you to identify the type of LMS and maybe customize your tool accordingly. Common examples are: `moodle`, `canvas` and `BlackboardLearn`.

#### version[​](#version "Direct link to heading")

The `version` field contains the LMS version inside its own versioning system.

### Launch section[​](#launch-section "Direct link to heading")

The `launch` section in the LTIAAS ID Token is an object containing information specific to the actual LTI® Launch:

```
{  
  "ltiVersion": "1.3.0",  "launch": {    "context": {...},    "resourceLink": {...},    "presentation": {...},    "custom": {...}  },  ...}
```

#### context[​](#context "Direct link to heading")

The `context` object contains information regarding the LMS context where the LTI® launch was originated. A context is most commonly the representation of a course in the LMS, but it can be any section from where an LTI® tool can be launched.

```
{  
  "launch": {    "context": {      "id": "2",      "label": "course",      "title": "Course",      "type": [        "CourseSection"      ]    },    ...  },  ...}
```

-   `id` - Context ID. Commonly the ID of a course in the LMS.
-   `label` and `title` - Context name. These two fields usually contain a short and full version of the context name respectively.
-   `type` - Context type.

tip

A list of all possible context types can be found in the IMS Context Type Vocabulary:

Learning Tools Interoperability Core Specification, IMS Final Release Spec Version 1.3, 1EdTech Consortium, April 2019, A.1 Context type vocabulary, [https://www.imsglobal.org/spec/lti/v1p3/#context-type-vocabulary](https://www.imsglobal.org/spec/lti/v1p3/#context-type-vocabulary).

#### resourceLink[​](#resourcelink "Direct link to heading")

The `resourceLink` object contains information regarding the LMS resource link that originated the current LTI® launch. A resource link is most commonly the representation of an activity in the LMS.

```
{  
  "launch": {    "resourceLink": {      "id": "4",      "title": "LTI® Activity 1",      "description": "This is a cool activity"    },    ...  },  ...}
```

-   `id` - Resource link ID. Commonly the ID of an activity in the LMS.
-   `title` - Resource link name.
-   `description` - Resource link description.

#### presentation[​](#presentation "Direct link to heading")

The `presentation` object contains information regarding how the current LTI® launch is being displayed.

```
{  
  "launch": {    "presentation": {      "documentTarget": "iframe",      "locale": "en"    },    ...  },  ...}
```

-   `documentTarget` - Type of LTI® tool visualization. Possible values for this field are `frame`, `iframe` or `window`.
-   `locale` - Language, country, and variant as represented using the [IETF Best Practices for Tags for Identifying Languages](https://www.rfc-editor.org/rfc/rfc5646).

#### custom[​](#custom "Direct link to heading")

The `custom` object contains key-value pairs representing the custom parameters defined in the LMS for that tool. Depending on the LMS you can set these custom parameters globally for a tool or specific to individual launches or locations inside the LMS. Some LMSes also support variable substitution.

```
{  
  "launch": {    "custom": {      "param": "value",      "location": "workspace"    },    ...  },  ...}
```

### Services section[​](#services-section "Direct link to heading")

The `services` section in the LTIAAS ID Token is an object containing information regarding the LTI® services and their availability in the context of a specific LTI® Launch:

```
{  
  "ltiVersion": "1.3.0",  "services": {    "deepLinking": {...},    "namesAndRoles": {...},    "assignmentAndGrades": {...},    "serviceKey": "eyJhbGciajsheu..."  },  ...}
```

#### deepLinking[​](#deeplinking "Direct link to heading")

The `deepLinking` object contains availability information for the *Deep Linking* LTI® service.

```
{  
  "services": {    "deepLinking": {      "available": false    },    ...  },  ...}
```

-   `available` - Availability status for the *Deep Linking* service in the current launch context.

#### namesAndRoles[​](#namesandroles "Direct link to heading")

The `namesAndRoles` object contains availability information for the *Names and Roles Provisioning* LTI® service.

```
{  
  "services": {    "namesAndRoles": {      "available": true    },    ...  },  ...}
```

-   `available` - Availability status for the *Names and Roles Provisioning* service in the current launch context.

#### assignmentAndGrades[​](#assignmentandgrades "Direct link to heading")

The `assignmentAndGrades` object contains availability information for the *Assignment and Grades* LTI® service.

```
{  
  "services": {    "assignmentAndGrades": {      "available": true,      "lineItemId": "https://lms.example.com/course/1/lineitems/1",    },    ...  },  ...}
```

-   `available` - Availability status for the *Assignment and Grades* service in the current launch context.
-   `lineItemId` - Line item ID for the current launch context. This field will only be present if there's only one line item ID associated with the current context.

#### serviceKey[​](#servicekey "Direct link to heading")

The `serviceKey` field contains the service key token that can be used to perform the [service key based API authentication](/guides/api/authentication#service-key-based-authentication). This field is only populated if the current launch context has access to at least one of the *Assignment and Grades* or *Names and Roles Provisioning* LTI® services.

## Additional fields and raw ID Token[​](#additional-fields-and-raw-id-token "Direct link to heading")

This guide focuses on the most common and/or relevant fields of each section in the ID Token object, for a full list of fields currently supported, check the [ID Token endpoint API reference](/api/get-idtoken).

info

If the field you need to build your LTI® integration is not one of the fields we take into account when formatting the ID Token, please fell free to [contact us](/contact-us) and we will make sure to include it in a future update.

Alternatively, you can retrieve a raw version of the ID Token generated by the LMS by sending the `?raw=true` query parameter when calling the `/api/idtoken` endpoint:

```
// Building Ltik based API authentication header  
const authorizationHeader = `LTIK-AUTH-V2 ${API_KEY}:${LTIK}`  
const headers = { Authorization: authorizationHeader }  
// Making /api/idtoken GET request  
const response = requests.get('https://your.ltiaas.com/api/idtoken?raw=true', { headers })  
const userID = response['sub']  
const userEmail = response['email']
```

The response will be an unformatted version of the ID Token object, including every field as sent by the LMS:

```
{  
  "sub": "2",  "iss": "https://lms.example.com",  "aud": "KzJtrQxEUYGWXjx",  "email": "john@lms.com",  "name": "John Doe",  "givenName": "John",  "familyName": "Doe",  "https://purl.imsglobal.org/spec/lti/claim/ext": {...},  "https://purl.imsglobal.org/spec/lti/claim/deployment_id": "1",  "https://purl.imsglobal.org/spec/lti/claim/version": "1.3.0",  "https://purl.imsglobal.org/spec/lti/claim/tool_platform": {...},  "https://purl.imsglobal.org/spec/lti/claim/custom": {...},  "https://purl.imsglobal.org/spec/lti/claim/launch_presentation": {...},  "https://purl.imsglobal.org/spec/lti/claim/roles": [...],  "https://purl.imsglobal.org/spec/lti/claim/context": {...},  "https://purl.imsglobal.org/spec/lti/claim/resource_link": {...},  ...}
```

## Performing SSO[​](#performing-sso "Direct link to heading")

After retrieving the ID Token, you can use the information contained in it to perform SSO and authenticate users into your application, automatically logging them into a preexisting account or provisioning a new one on the spot. There are two main ways of identifying a user:

### Identifying the user by their email[​](#identifying-the-user-by-their-email "Direct link to heading")

One of the quickest ways of identifying a user is through their email:

```
// Building Ltik based API authentication header  
const authorizationHeader = `LTIK-AUTH-V2 ${API_KEY}:${LTIK}`  
const headers = { Authorization: authorizationHeader }  
// Making /api/idtoken GET request  
const response = requests.get('https://your.ltiaas.com/api/idtoken', { headers })  
const userEmail = response['user']['email'] // user@email.com
```

The email contained in the ID Token can be trusted as an identifier for the user that initiated that specific LTI® launch.

caution

The `user.email` field might not be present in the ID Token. The LMS can choose to omit this information based on their privacy rules.

### Identifying the user by their ID[​](#identifying-the-user-by-their-id "Direct link to heading")

The most reliable way of identifying a user is through their ID reported in the ID Token. This ID is only unique within the LMS that originated the LTI® launch, so this value alone is not enough to represent a globally unique user. To get a globally unique identifier, you can combine the value of the user ID with the platform ID:

```
// Building Ltik based API authentication header  
const authorizationHeader = `LTIK-AUTH-V2 ${API_KEY}:${LTIK}`  
const headers = { Authorization: authorizationHeader }  
// Making /api/idtoken GET request  
const response = requests.get('https://your.ltiaas.com/api/idtoken', { headers })  
const platformID = response['platform']['id'] // Y9LENU9n911EMxp9QSrE  
const userID = response['user']['id'] // 2  
// Build globally unique user ID  
const globalUserID = `${platformID}:${userID}`
```

info

You could technically generate a more precise platform identifier by also combining the platform's deployment ID, however, this is largely unnecessary since user IDs should be unique across different instances of the same platform registration.

**Tags:**

-   [API](/tags/api)
-   [ID Token](/tags/id-token)
-   [Tutorials](/tags/tutorials)
</file>

<file path="ltiaas-guides-docs/guides/api/idtoken#context/index.md">
---
title: Retrieving the ID Token
url: https://docs.ltiaas.com/guides/api/idtoken#context
source: LTIaaS Documentation
---

# Retrieving the ID Token

-   [](/)
-   [Using the LTIAAS API](/guides/api/introduction)
-   Retrieving the ID Token

On this page

# Retrieving the ID Token

tip

Make sure you've read about [authenticating API requests](/guides/api/authentication) before proceeding to the guide below.

info

The ID Token endpoint only accepts the [ltik based API authentication method](/guides/api/authentication#ltik-based-authentication).

The ID Token is the main piece of data in the LTI® protocol, it's sent by the LMS to the LTI® tool and contains information regarding the current LTI® launch, this includes user information, LMS information, launch context information and everything you need to use the many LTI® services.

LTIAAS gives you access to a launch specific ID Token, formatted for easy of use, through the `/api/idtoken` API endpoint.

![Retrieving ID Token](/assets/ideal-img/flow_idtoken.41ed26f.1118.png)

![Retrieving ID Token](/assets/ideal-img/flow_idtoken_dark.f622c04.1118.png)

Retrieving ID Token

## Calling the ID Token endpoint[​](#calling-the-id-token-endpoint "Direct link to heading")

To retrieve the ID Token related to an LTI® launch, you need to make a GET request to the `/api/idtoken` endpoint of your LTIAAS' account subdomain.

```
// Building Ltik based API authentication header  
const authorizationHeader = `LTIK-AUTH-V2 ${API_KEY}:${LTIK}`  
const headers = { Authorization: authorizationHeader }  
// Making /api/idtoken GET request  
const response = requests.get('https://your.ltiaas.com/api/idtoken', { headers })  
const userInfo = response['user']  
const lmsInfo = response['platform']  
const launchInfo = response['launch']  
const servicesInfo = response['services']
```

You now have everything you need to [perform SSO and let users into your application](#performing-sso).

## Structure of the LTIAAS ID Token[​](#structure-of-the-ltiaas-id-token "Direct link to heading")

info

This guide focuses on the most common and/or relevant fields of each section in the ID Token object, for a full list of fields currently supported, as well as possible API response bodies and statuses, check the [\[GET\] ID Token endpoint API reference](/api/get-idtoken).

LTIAAS formats the raw ID Token sent by the LMS into a developer-friendly format, separating the claims into helpful sections and giving them more human-readable names:

```
{  
  "ltiVersion": "1.3.0",  "user": {...},  "platform": {...},  "launch": {...},  "services": {...}}
```

### User section[​](#user-section "Direct link to heading")

The `user` section in the LTIAAS ID Token is an object containing information provided by the LMS regarding the user that initiated a specific LTI® launch:

```
{  
  "ltiVersion": "1.3.0",  "user": {    "id": "2",    "email": "john@lms.com",    "name": "John Doe",    "givenName": "John",    "familyName": "Doe",    "roles": [      "http://purl.imsglobal.org/vocab/lis/v2/system/person#Administrator"    ],    ...  },  ...}
```

info

Fields containing personal information like `name` and `email` might not be present in the ID Token. The LMS can choose to omit this information based on their privacy rules. The only fields guaranteed to be present in this section are `id` and `roles`.

#### id[​](#id "Direct link to heading")

The `id` field contains the user's identifier inside of the LMS. This ID will probably not be unique between LMSes, so it's not recommended to be used alone as a primary identifier. We go into more detail on this topic in the [performing SSO section](#performing-sso).

#### email[​](#email "Direct link to heading")

The `email` field contains the user's registered email inside of the LMS.

#### name, givenName and familyName[​](#name-givenname-and-familyname "Direct link to heading")

The `name`, `givenName` and `familyName` fields contain the user's registered full name, first last and last name respectively.

#### roles[​](#roles "Direct link to heading")

The `roles` field contains a list of the user's roles within this specific launch context.

tip

A list of all possible roles can be found in the IMS Role Vocabulary:

Learning Tools Interoperability (LTI®) Core Specification, IMS Final Release Spec Version 1.3, 1EdTech Consortium, April 2019, A.2 Role vocabularies, [https://www.imsglobal.org/node/162741#role-vocabularies](https://www.imsglobal.org/node/162741#role-vocabularies).

You can choose to customize your tool's view based on the roles present in this list, for example, showing additional options for user's with variations of the `Instructor` role.

### Platform section[​](#platform-section "Direct link to heading")

The `platform` section in the LTIAAS ID Token is an object containing information regarding the LMS that originated a specific LTI® launch:

```
{  
  "ltiVersion": "1.3.0",  "platform": {    "id": "Y9LENU9n911EMxp9QSrE",    "url": "https://lms.example.com",    "clientId": "KzJtrQxEUYGWXjx",    "deploymentId": "1",    "name": "LMS",    "description": "A great LMS",    "productFamilyCode": "lms",    "version": "2021051712",    ...  },  ...}
```

#### id[​](#id-1 "Direct link to heading")

The `id` field contains the LMS's registration ID inside LTIAAS, generated when you perform a platform registration. This ID is globally unique.

#### url[​](#url "Direct link to heading")

The `url` field contains the LMS's issuer URL. This will match the URL used in the platform registration.

#### clientId[​](#clientid "Direct link to heading")

The `clientId` field contains the identifier generated by LMS for your LTI® tool. This will match the client ID used in the platform registration.

#### deploymentId[​](#deploymentid "Direct link to heading")

The `deploymentId` field contains the identifier for one specific instance of the LMS. This is most relevant when dealing with an LMS that uses multi-tenancy (Blackboard, for example), since this means that every instance of this LMS will share a single platform registration. The deployment ID will allow you to track and/or control access between the various instances of such LMSes.

#### name and description[​](#name-and-description "Direct link to heading")

The `name` and `description` fields contain the LMS's name and description as used in the platform registration.

#### productFamilyCode[​](#productfamilycode "Direct link to heading")

The `productFamilyCode` field contains an identifier for that family of LMSes. This allows you to identify the type of LMS and maybe customize your tool accordingly. Common examples are: `moodle`, `canvas` and `BlackboardLearn`.

#### version[​](#version "Direct link to heading")

The `version` field contains the LMS version inside its own versioning system.

### Launch section[​](#launch-section "Direct link to heading")

The `launch` section in the LTIAAS ID Token is an object containing information specific to the actual LTI® Launch:

```
{  
  "ltiVersion": "1.3.0",  "launch": {    "context": {...},    "resourceLink": {...},    "presentation": {...},    "custom": {...}  },  ...}
```

#### context[​](#context "Direct link to heading")

The `context` object contains information regarding the LMS context where the LTI® launch was originated. A context is most commonly the representation of a course in the LMS, but it can be any section from where an LTI® tool can be launched.

```
{  
  "launch": {    "context": {      "id": "2",      "label": "course",      "title": "Course",      "type": [        "CourseSection"      ]    },    ...  },  ...}
```

-   `id` - Context ID. Commonly the ID of a course in the LMS.
-   `label` and `title` - Context name. These two fields usually contain a short and full version of the context name respectively.
-   `type` - Context type.

tip

A list of all possible context types can be found in the IMS Context Type Vocabulary:

Learning Tools Interoperability Core Specification, IMS Final Release Spec Version 1.3, 1EdTech Consortium, April 2019, A.1 Context type vocabulary, [https://www.imsglobal.org/spec/lti/v1p3/#context-type-vocabulary](https://www.imsglobal.org/spec/lti/v1p3/#context-type-vocabulary).

#### resourceLink[​](#resourcelink "Direct link to heading")

The `resourceLink` object contains information regarding the LMS resource link that originated the current LTI® launch. A resource link is most commonly the representation of an activity in the LMS.

```
{  
  "launch": {    "resourceLink": {      "id": "4",      "title": "LTI® Activity 1",      "description": "This is a cool activity"    },    ...  },  ...}
```

-   `id` - Resource link ID. Commonly the ID of an activity in the LMS.
-   `title` - Resource link name.
-   `description` - Resource link description.

#### presentation[​](#presentation "Direct link to heading")

The `presentation` object contains information regarding how the current LTI® launch is being displayed.

```
{  
  "launch": {    "presentation": {      "documentTarget": "iframe",      "locale": "en"    },    ...  },  ...}
```

-   `documentTarget` - Type of LTI® tool visualization. Possible values for this field are `frame`, `iframe` or `window`.
-   `locale` - Language, country, and variant as represented using the [IETF Best Practices for Tags for Identifying Languages](https://www.rfc-editor.org/rfc/rfc5646).

#### custom[​](#custom "Direct link to heading")

The `custom` object contains key-value pairs representing the custom parameters defined in the LMS for that tool. Depending on the LMS you can set these custom parameters globally for a tool or specific to individual launches or locations inside the LMS. Some LMSes also support variable substitution.

```
{  
  "launch": {    "custom": {      "param": "value",      "location": "workspace"    },    ...  },  ...}
```

### Services section[​](#services-section "Direct link to heading")

The `services` section in the LTIAAS ID Token is an object containing information regarding the LTI® services and their availability in the context of a specific LTI® Launch:

```
{  
  "ltiVersion": "1.3.0",  "services": {    "deepLinking": {...},    "namesAndRoles": {...},    "assignmentAndGrades": {...},    "serviceKey": "eyJhbGciajsheu..."  },  ...}
```

#### deepLinking[​](#deeplinking "Direct link to heading")

The `deepLinking` object contains availability information for the *Deep Linking* LTI® service.

```
{  
  "services": {    "deepLinking": {      "available": false    },    ...  },  ...}
```

-   `available` - Availability status for the *Deep Linking* service in the current launch context.

#### namesAndRoles[​](#namesandroles "Direct link to heading")

The `namesAndRoles` object contains availability information for the *Names and Roles Provisioning* LTI® service.

```
{  
  "services": {    "namesAndRoles": {      "available": true    },    ...  },  ...}
```

-   `available` - Availability status for the *Names and Roles Provisioning* service in the current launch context.

#### assignmentAndGrades[​](#assignmentandgrades "Direct link to heading")

The `assignmentAndGrades` object contains availability information for the *Assignment and Grades* LTI® service.

```
{  
  "services": {    "assignmentAndGrades": {      "available": true,      "lineItemId": "https://lms.example.com/course/1/lineitems/1",    },    ...  },  ...}
```

-   `available` - Availability status for the *Assignment and Grades* service in the current launch context.
-   `lineItemId` - Line item ID for the current launch context. This field will only be present if there's only one line item ID associated with the current context.

#### serviceKey[​](#servicekey "Direct link to heading")

The `serviceKey` field contains the service key token that can be used to perform the [service key based API authentication](/guides/api/authentication#service-key-based-authentication). This field is only populated if the current launch context has access to at least one of the *Assignment and Grades* or *Names and Roles Provisioning* LTI® services.

## Additional fields and raw ID Token[​](#additional-fields-and-raw-id-token "Direct link to heading")

This guide focuses on the most common and/or relevant fields of each section in the ID Token object, for a full list of fields currently supported, check the [ID Token endpoint API reference](/api/get-idtoken).

info

If the field you need to build your LTI® integration is not one of the fields we take into account when formatting the ID Token, please fell free to [contact us](/contact-us) and we will make sure to include it in a future update.

Alternatively, you can retrieve a raw version of the ID Token generated by the LMS by sending the `?raw=true` query parameter when calling the `/api/idtoken` endpoint:

```
// Building Ltik based API authentication header  
const authorizationHeader = `LTIK-AUTH-V2 ${API_KEY}:${LTIK}`  
const headers = { Authorization: authorizationHeader }  
// Making /api/idtoken GET request  
const response = requests.get('https://your.ltiaas.com/api/idtoken?raw=true', { headers })  
const userID = response['sub']  
const userEmail = response['email']
```

The response will be an unformatted version of the ID Token object, including every field as sent by the LMS:

```
{  
  "sub": "2",  "iss": "https://lms.example.com",  "aud": "KzJtrQxEUYGWXjx",  "email": "john@lms.com",  "name": "John Doe",  "givenName": "John",  "familyName": "Doe",  "https://purl.imsglobal.org/spec/lti/claim/ext": {...},  "https://purl.imsglobal.org/spec/lti/claim/deployment_id": "1",  "https://purl.imsglobal.org/spec/lti/claim/version": "1.3.0",  "https://purl.imsglobal.org/spec/lti/claim/tool_platform": {...},  "https://purl.imsglobal.org/spec/lti/claim/custom": {...},  "https://purl.imsglobal.org/spec/lti/claim/launch_presentation": {...},  "https://purl.imsglobal.org/spec/lti/claim/roles": [...],  "https://purl.imsglobal.org/spec/lti/claim/context": {...},  "https://purl.imsglobal.org/spec/lti/claim/resource_link": {...},  ...}
```

## Performing SSO[​](#performing-sso "Direct link to heading")

After retrieving the ID Token, you can use the information contained in it to perform SSO and authenticate users into your application, automatically logging them into a preexisting account or provisioning a new one on the spot. There are two main ways of identifying a user:

### Identifying the user by their email[​](#identifying-the-user-by-their-email "Direct link to heading")

One of the quickest ways of identifying a user is through their email:

```
// Building Ltik based API authentication header  
const authorizationHeader = `LTIK-AUTH-V2 ${API_KEY}:${LTIK}`  
const headers = { Authorization: authorizationHeader }  
// Making /api/idtoken GET request  
const response = requests.get('https://your.ltiaas.com/api/idtoken', { headers })  
const userEmail = response['user']['email'] // user@email.com
```

The email contained in the ID Token can be trusted as an identifier for the user that initiated that specific LTI® launch.

caution

The `user.email` field might not be present in the ID Token. The LMS can choose to omit this information based on their privacy rules.

### Identifying the user by their ID[​](#identifying-the-user-by-their-id "Direct link to heading")

The most reliable way of identifying a user is through their ID reported in the ID Token. This ID is only unique within the LMS that originated the LTI® launch, so this value alone is not enough to represent a globally unique user. To get a globally unique identifier, you can combine the value of the user ID with the platform ID:

```
// Building Ltik based API authentication header  
const authorizationHeader = `LTIK-AUTH-V2 ${API_KEY}:${LTIK}`  
const headers = { Authorization: authorizationHeader }  
// Making /api/idtoken GET request  
const response = requests.get('https://your.ltiaas.com/api/idtoken', { headers })  
const platformID = response['platform']['id'] // Y9LENU9n911EMxp9QSrE  
const userID = response['user']['id'] // 2  
// Build globally unique user ID  
const globalUserID = `${platformID}:${userID}`
```

info

You could technically generate a more precise platform identifier by also combining the platform's deployment ID, however, this is largely unnecessary since user IDs should be unique across different instances of the same platform registration.

**Tags:**

-   [API](/tags/api)
-   [ID Token](/tags/id-token)
-   [Tutorials](/tags/tutorials)
</file>

<file path="ltiaas-guides-docs/guides/api/idtoken#deeplinking/index.md">
---
title: Retrieving the ID Token
url: https://docs.ltiaas.com/guides/api/idtoken#deeplinking
source: LTIaaS Documentation
---

# Retrieving the ID Token

-   [](/)
-   [Using the LTIAAS API](/guides/api/introduction)
-   Retrieving the ID Token

On this page

# Retrieving the ID Token

tip

Make sure you've read about [authenticating API requests](/guides/api/authentication) before proceeding to the guide below.

info

The ID Token endpoint only accepts the [ltik based API authentication method](/guides/api/authentication#ltik-based-authentication).

The ID Token is the main piece of data in the LTI® protocol, it's sent by the LMS to the LTI® tool and contains information regarding the current LTI® launch, this includes user information, LMS information, launch context information and everything you need to use the many LTI® services.

LTIAAS gives you access to a launch specific ID Token, formatted for easy of use, through the `/api/idtoken` API endpoint.

![Retrieving ID Token](/assets/ideal-img/flow_idtoken.41ed26f.1118.png)

![Retrieving ID Token](/assets/ideal-img/flow_idtoken_dark.f622c04.1118.png)

Retrieving ID Token

## Calling the ID Token endpoint[​](#calling-the-id-token-endpoint "Direct link to heading")

To retrieve the ID Token related to an LTI® launch, you need to make a GET request to the `/api/idtoken` endpoint of your LTIAAS' account subdomain.

```
// Building Ltik based API authentication header  
const authorizationHeader = `LTIK-AUTH-V2 ${API_KEY}:${LTIK}`  
const headers = { Authorization: authorizationHeader }  
// Making /api/idtoken GET request  
const response = requests.get('https://your.ltiaas.com/api/idtoken', { headers })  
const userInfo = response['user']  
const lmsInfo = response['platform']  
const launchInfo = response['launch']  
const servicesInfo = response['services']
```

You now have everything you need to [perform SSO and let users into your application](#performing-sso).

## Structure of the LTIAAS ID Token[​](#structure-of-the-ltiaas-id-token "Direct link to heading")

info

This guide focuses on the most common and/or relevant fields of each section in the ID Token object, for a full list of fields currently supported, as well as possible API response bodies and statuses, check the [\[GET\] ID Token endpoint API reference](/api/get-idtoken).

LTIAAS formats the raw ID Token sent by the LMS into a developer-friendly format, separating the claims into helpful sections and giving them more human-readable names:

```
{  
  "ltiVersion": "1.3.0",  "user": {...},  "platform": {...},  "launch": {...},  "services": {...}}
```

### User section[​](#user-section "Direct link to heading")

The `user` section in the LTIAAS ID Token is an object containing information provided by the LMS regarding the user that initiated a specific LTI® launch:

```
{  
  "ltiVersion": "1.3.0",  "user": {    "id": "2",    "email": "john@lms.com",    "name": "John Doe",    "givenName": "John",    "familyName": "Doe",    "roles": [      "http://purl.imsglobal.org/vocab/lis/v2/system/person#Administrator"    ],    ...  },  ...}
```

info

Fields containing personal information like `name` and `email` might not be present in the ID Token. The LMS can choose to omit this information based on their privacy rules. The only fields guaranteed to be present in this section are `id` and `roles`.

#### id[​](#id "Direct link to heading")

The `id` field contains the user's identifier inside of the LMS. This ID will probably not be unique between LMSes, so it's not recommended to be used alone as a primary identifier. We go into more detail on this topic in the [performing SSO section](#performing-sso).

#### email[​](#email "Direct link to heading")

The `email` field contains the user's registered email inside of the LMS.

#### name, givenName and familyName[​](#name-givenname-and-familyname "Direct link to heading")

The `name`, `givenName` and `familyName` fields contain the user's registered full name, first last and last name respectively.

#### roles[​](#roles "Direct link to heading")

The `roles` field contains a list of the user's roles within this specific launch context.

tip

A list of all possible roles can be found in the IMS Role Vocabulary:

Learning Tools Interoperability (LTI®) Core Specification, IMS Final Release Spec Version 1.3, 1EdTech Consortium, April 2019, A.2 Role vocabularies, [https://www.imsglobal.org/node/162741#role-vocabularies](https://www.imsglobal.org/node/162741#role-vocabularies).

You can choose to customize your tool's view based on the roles present in this list, for example, showing additional options for user's with variations of the `Instructor` role.

### Platform section[​](#platform-section "Direct link to heading")

The `platform` section in the LTIAAS ID Token is an object containing information regarding the LMS that originated a specific LTI® launch:

```
{  
  "ltiVersion": "1.3.0",  "platform": {    "id": "Y9LENU9n911EMxp9QSrE",    "url": "https://lms.example.com",    "clientId": "KzJtrQxEUYGWXjx",    "deploymentId": "1",    "name": "LMS",    "description": "A great LMS",    "productFamilyCode": "lms",    "version": "2021051712",    ...  },  ...}
```

#### id[​](#id-1 "Direct link to heading")

The `id` field contains the LMS's registration ID inside LTIAAS, generated when you perform a platform registration. This ID is globally unique.

#### url[​](#url "Direct link to heading")

The `url` field contains the LMS's issuer URL. This will match the URL used in the platform registration.

#### clientId[​](#clientid "Direct link to heading")

The `clientId` field contains the identifier generated by LMS for your LTI® tool. This will match the client ID used in the platform registration.

#### deploymentId[​](#deploymentid "Direct link to heading")

The `deploymentId` field contains the identifier for one specific instance of the LMS. This is most relevant when dealing with an LMS that uses multi-tenancy (Blackboard, for example), since this means that every instance of this LMS will share a single platform registration. The deployment ID will allow you to track and/or control access between the various instances of such LMSes.

#### name and description[​](#name-and-description "Direct link to heading")

The `name` and `description` fields contain the LMS's name and description as used in the platform registration.

#### productFamilyCode[​](#productfamilycode "Direct link to heading")

The `productFamilyCode` field contains an identifier for that family of LMSes. This allows you to identify the type of LMS and maybe customize your tool accordingly. Common examples are: `moodle`, `canvas` and `BlackboardLearn`.

#### version[​](#version "Direct link to heading")

The `version` field contains the LMS version inside its own versioning system.

### Launch section[​](#launch-section "Direct link to heading")

The `launch` section in the LTIAAS ID Token is an object containing information specific to the actual LTI® Launch:

```
{  
  "ltiVersion": "1.3.0",  "launch": {    "context": {...},    "resourceLink": {...},    "presentation": {...},    "custom": {...}  },  ...}
```

#### context[​](#context "Direct link to heading")

The `context` object contains information regarding the LMS context where the LTI® launch was originated. A context is most commonly the representation of a course in the LMS, but it can be any section from where an LTI® tool can be launched.

```
{  
  "launch": {    "context": {      "id": "2",      "label": "course",      "title": "Course",      "type": [        "CourseSection"      ]    },    ...  },  ...}
```

-   `id` - Context ID. Commonly the ID of a course in the LMS.
-   `label` and `title` - Context name. These two fields usually contain a short and full version of the context name respectively.
-   `type` - Context type.

tip

A list of all possible context types can be found in the IMS Context Type Vocabulary:

Learning Tools Interoperability Core Specification, IMS Final Release Spec Version 1.3, 1EdTech Consortium, April 2019, A.1 Context type vocabulary, [https://www.imsglobal.org/spec/lti/v1p3/#context-type-vocabulary](https://www.imsglobal.org/spec/lti/v1p3/#context-type-vocabulary).

#### resourceLink[​](#resourcelink "Direct link to heading")

The `resourceLink` object contains information regarding the LMS resource link that originated the current LTI® launch. A resource link is most commonly the representation of an activity in the LMS.

```
{  
  "launch": {    "resourceLink": {      "id": "4",      "title": "LTI® Activity 1",      "description": "This is a cool activity"    },    ...  },  ...}
```

-   `id` - Resource link ID. Commonly the ID of an activity in the LMS.
-   `title` - Resource link name.
-   `description` - Resource link description.

#### presentation[​](#presentation "Direct link to heading")

The `presentation` object contains information regarding how the current LTI® launch is being displayed.

```
{  
  "launch": {    "presentation": {      "documentTarget": "iframe",      "locale": "en"    },    ...  },  ...}
```

-   `documentTarget` - Type of LTI® tool visualization. Possible values for this field are `frame`, `iframe` or `window`.
-   `locale` - Language, country, and variant as represented using the [IETF Best Practices for Tags for Identifying Languages](https://www.rfc-editor.org/rfc/rfc5646).

#### custom[​](#custom "Direct link to heading")

The `custom` object contains key-value pairs representing the custom parameters defined in the LMS for that tool. Depending on the LMS you can set these custom parameters globally for a tool or specific to individual launches or locations inside the LMS. Some LMSes also support variable substitution.

```
{  
  "launch": {    "custom": {      "param": "value",      "location": "workspace"    },    ...  },  ...}
```

### Services section[​](#services-section "Direct link to heading")

The `services` section in the LTIAAS ID Token is an object containing information regarding the LTI® services and their availability in the context of a specific LTI® Launch:

```
{  
  "ltiVersion": "1.3.0",  "services": {    "deepLinking": {...},    "namesAndRoles": {...},    "assignmentAndGrades": {...},    "serviceKey": "eyJhbGciajsheu..."  },  ...}
```

#### deepLinking[​](#deeplinking "Direct link to heading")

The `deepLinking` object contains availability information for the *Deep Linking* LTI® service.

```
{  
  "services": {    "deepLinking": {      "available": false    },    ...  },  ...}
```

-   `available` - Availability status for the *Deep Linking* service in the current launch context.

#### namesAndRoles[​](#namesandroles "Direct link to heading")

The `namesAndRoles` object contains availability information for the *Names and Roles Provisioning* LTI® service.

```
{  
  "services": {    "namesAndRoles": {      "available": true    },    ...  },  ...}
```

-   `available` - Availability status for the *Names and Roles Provisioning* service in the current launch context.

#### assignmentAndGrades[​](#assignmentandgrades "Direct link to heading")

The `assignmentAndGrades` object contains availability information for the *Assignment and Grades* LTI® service.

```
{  
  "services": {    "assignmentAndGrades": {      "available": true,      "lineItemId": "https://lms.example.com/course/1/lineitems/1",    },    ...  },  ...}
```

-   `available` - Availability status for the *Assignment and Grades* service in the current launch context.
-   `lineItemId` - Line item ID for the current launch context. This field will only be present if there's only one line item ID associated with the current context.

#### serviceKey[​](#servicekey "Direct link to heading")

The `serviceKey` field contains the service key token that can be used to perform the [service key based API authentication](/guides/api/authentication#service-key-based-authentication). This field is only populated if the current launch context has access to at least one of the *Assignment and Grades* or *Names and Roles Provisioning* LTI® services.

## Additional fields and raw ID Token[​](#additional-fields-and-raw-id-token "Direct link to heading")

This guide focuses on the most common and/or relevant fields of each section in the ID Token object, for a full list of fields currently supported, check the [ID Token endpoint API reference](/api/get-idtoken).

info

If the field you need to build your LTI® integration is not one of the fields we take into account when formatting the ID Token, please fell free to [contact us](/contact-us) and we will make sure to include it in a future update.

Alternatively, you can retrieve a raw version of the ID Token generated by the LMS by sending the `?raw=true` query parameter when calling the `/api/idtoken` endpoint:

```
// Building Ltik based API authentication header  
const authorizationHeader = `LTIK-AUTH-V2 ${API_KEY}:${LTIK}`  
const headers = { Authorization: authorizationHeader }  
// Making /api/idtoken GET request  
const response = requests.get('https://your.ltiaas.com/api/idtoken?raw=true', { headers })  
const userID = response['sub']  
const userEmail = response['email']
```

The response will be an unformatted version of the ID Token object, including every field as sent by the LMS:

```
{  
  "sub": "2",  "iss": "https://lms.example.com",  "aud": "KzJtrQxEUYGWXjx",  "email": "john@lms.com",  "name": "John Doe",  "givenName": "John",  "familyName": "Doe",  "https://purl.imsglobal.org/spec/lti/claim/ext": {...},  "https://purl.imsglobal.org/spec/lti/claim/deployment_id": "1",  "https://purl.imsglobal.org/spec/lti/claim/version": "1.3.0",  "https://purl.imsglobal.org/spec/lti/claim/tool_platform": {...},  "https://purl.imsglobal.org/spec/lti/claim/custom": {...},  "https://purl.imsglobal.org/spec/lti/claim/launch_presentation": {...},  "https://purl.imsglobal.org/spec/lti/claim/roles": [...],  "https://purl.imsglobal.org/spec/lti/claim/context": {...},  "https://purl.imsglobal.org/spec/lti/claim/resource_link": {...},  ...}
```

## Performing SSO[​](#performing-sso "Direct link to heading")

After retrieving the ID Token, you can use the information contained in it to perform SSO and authenticate users into your application, automatically logging them into a preexisting account or provisioning a new one on the spot. There are two main ways of identifying a user:

### Identifying the user by their email[​](#identifying-the-user-by-their-email "Direct link to heading")

One of the quickest ways of identifying a user is through their email:

```
// Building Ltik based API authentication header  
const authorizationHeader = `LTIK-AUTH-V2 ${API_KEY}:${LTIK}`  
const headers = { Authorization: authorizationHeader }  
// Making /api/idtoken GET request  
const response = requests.get('https://your.ltiaas.com/api/idtoken', { headers })  
const userEmail = response['user']['email'] // user@email.com
```

The email contained in the ID Token can be trusted as an identifier for the user that initiated that specific LTI® launch.

caution

The `user.email` field might not be present in the ID Token. The LMS can choose to omit this information based on their privacy rules.

### Identifying the user by their ID[​](#identifying-the-user-by-their-id "Direct link to heading")

The most reliable way of identifying a user is through their ID reported in the ID Token. This ID is only unique within the LMS that originated the LTI® launch, so this value alone is not enough to represent a globally unique user. To get a globally unique identifier, you can combine the value of the user ID with the platform ID:

```
// Building Ltik based API authentication header  
const authorizationHeader = `LTIK-AUTH-V2 ${API_KEY}:${LTIK}`  
const headers = { Authorization: authorizationHeader }  
// Making /api/idtoken GET request  
const response = requests.get('https://your.ltiaas.com/api/idtoken', { headers })  
const platformID = response['platform']['id'] // Y9LENU9n911EMxp9QSrE  
const userID = response['user']['id'] // 2  
// Build globally unique user ID  
const globalUserID = `${platformID}:${userID}`
```

info

You could technically generate a more precise platform identifier by also combining the platform's deployment ID, however, this is largely unnecessary since user IDs should be unique across different instances of the same platform registration.

**Tags:**

-   [API](/tags/api)
-   [ID Token](/tags/id-token)
-   [Tutorials](/tags/tutorials)
</file>

<file path="ltiaas-guides-docs/guides/api/idtoken#namesandroles/index.md">
---
title: Retrieving the ID Token
url: https://docs.ltiaas.com/guides/api/idtoken#namesandroles
source: LTIaaS Documentation
---

# Retrieving the ID Token

-   [](/)
-   [Using the LTIAAS API](/guides/api/introduction)
-   Retrieving the ID Token

On this page

# Retrieving the ID Token

tip

Make sure you've read about [authenticating API requests](/guides/api/authentication) before proceeding to the guide below.

info

The ID Token endpoint only accepts the [ltik based API authentication method](/guides/api/authentication#ltik-based-authentication).

The ID Token is the main piece of data in the LTI® protocol, it's sent by the LMS to the LTI® tool and contains information regarding the current LTI® launch, this includes user information, LMS information, launch context information and everything you need to use the many LTI® services.

LTIAAS gives you access to a launch specific ID Token, formatted for easy of use, through the `/api/idtoken` API endpoint.

![Retrieving ID Token](/assets/ideal-img/flow_idtoken.41ed26f.1118.png)

![Retrieving ID Token](/assets/ideal-img/flow_idtoken_dark.f622c04.1118.png)

Retrieving ID Token

## Calling the ID Token endpoint[​](#calling-the-id-token-endpoint "Direct link to heading")

To retrieve the ID Token related to an LTI® launch, you need to make a GET request to the `/api/idtoken` endpoint of your LTIAAS' account subdomain.

```
// Building Ltik based API authentication header  
const authorizationHeader = `LTIK-AUTH-V2 ${API_KEY}:${LTIK}`  
const headers = { Authorization: authorizationHeader }  
// Making /api/idtoken GET request  
const response = requests.get('https://your.ltiaas.com/api/idtoken', { headers })  
const userInfo = response['user']  
const lmsInfo = response['platform']  
const launchInfo = response['launch']  
const servicesInfo = response['services']
```

You now have everything you need to [perform SSO and let users into your application](#performing-sso).

## Structure of the LTIAAS ID Token[​](#structure-of-the-ltiaas-id-token "Direct link to heading")

info

This guide focuses on the most common and/or relevant fields of each section in the ID Token object, for a full list of fields currently supported, as well as possible API response bodies and statuses, check the [\[GET\] ID Token endpoint API reference](/api/get-idtoken).

LTIAAS formats the raw ID Token sent by the LMS into a developer-friendly format, separating the claims into helpful sections and giving them more human-readable names:

```
{  
  "ltiVersion": "1.3.0",  "user": {...},  "platform": {...},  "launch": {...},  "services": {...}}
```

### User section[​](#user-section "Direct link to heading")

The `user` section in the LTIAAS ID Token is an object containing information provided by the LMS regarding the user that initiated a specific LTI® launch:

```
{  
  "ltiVersion": "1.3.0",  "user": {    "id": "2",    "email": "john@lms.com",    "name": "John Doe",    "givenName": "John",    "familyName": "Doe",    "roles": [      "http://purl.imsglobal.org/vocab/lis/v2/system/person#Administrator"    ],    ...  },  ...}
```

info

Fields containing personal information like `name` and `email` might not be present in the ID Token. The LMS can choose to omit this information based on their privacy rules. The only fields guaranteed to be present in this section are `id` and `roles`.

#### id[​](#id "Direct link to heading")

The `id` field contains the user's identifier inside of the LMS. This ID will probably not be unique between LMSes, so it's not recommended to be used alone as a primary identifier. We go into more detail on this topic in the [performing SSO section](#performing-sso).

#### email[​](#email "Direct link to heading")

The `email` field contains the user's registered email inside of the LMS.

#### name, givenName and familyName[​](#name-givenname-and-familyname "Direct link to heading")

The `name`, `givenName` and `familyName` fields contain the user's registered full name, first last and last name respectively.

#### roles[​](#roles "Direct link to heading")

The `roles` field contains a list of the user's roles within this specific launch context.

tip

A list of all possible roles can be found in the IMS Role Vocabulary:

Learning Tools Interoperability (LTI®) Core Specification, IMS Final Release Spec Version 1.3, 1EdTech Consortium, April 2019, A.2 Role vocabularies, [https://www.imsglobal.org/node/162741#role-vocabularies](https://www.imsglobal.org/node/162741#role-vocabularies).

You can choose to customize your tool's view based on the roles present in this list, for example, showing additional options for user's with variations of the `Instructor` role.

### Platform section[​](#platform-section "Direct link to heading")

The `platform` section in the LTIAAS ID Token is an object containing information regarding the LMS that originated a specific LTI® launch:

```
{  
  "ltiVersion": "1.3.0",  "platform": {    "id": "Y9LENU9n911EMxp9QSrE",    "url": "https://lms.example.com",    "clientId": "KzJtrQxEUYGWXjx",    "deploymentId": "1",    "name": "LMS",    "description": "A great LMS",    "productFamilyCode": "lms",    "version": "2021051712",    ...  },  ...}
```

#### id[​](#id-1 "Direct link to heading")

The `id` field contains the LMS's registration ID inside LTIAAS, generated when you perform a platform registration. This ID is globally unique.

#### url[​](#url "Direct link to heading")

The `url` field contains the LMS's issuer URL. This will match the URL used in the platform registration.

#### clientId[​](#clientid "Direct link to heading")

The `clientId` field contains the identifier generated by LMS for your LTI® tool. This will match the client ID used in the platform registration.

#### deploymentId[​](#deploymentid "Direct link to heading")

The `deploymentId` field contains the identifier for one specific instance of the LMS. This is most relevant when dealing with an LMS that uses multi-tenancy (Blackboard, for example), since this means that every instance of this LMS will share a single platform registration. The deployment ID will allow you to track and/or control access between the various instances of such LMSes.

#### name and description[​](#name-and-description "Direct link to heading")

The `name` and `description` fields contain the LMS's name and description as used in the platform registration.

#### productFamilyCode[​](#productfamilycode "Direct link to heading")

The `productFamilyCode` field contains an identifier for that family of LMSes. This allows you to identify the type of LMS and maybe customize your tool accordingly. Common examples are: `moodle`, `canvas` and `BlackboardLearn`.

#### version[​](#version "Direct link to heading")

The `version` field contains the LMS version inside its own versioning system.

### Launch section[​](#launch-section "Direct link to heading")

The `launch` section in the LTIAAS ID Token is an object containing information specific to the actual LTI® Launch:

```
{  
  "ltiVersion": "1.3.0",  "launch": {    "context": {...},    "resourceLink": {...},    "presentation": {...},    "custom": {...}  },  ...}
```

#### context[​](#context "Direct link to heading")

The `context` object contains information regarding the LMS context where the LTI® launch was originated. A context is most commonly the representation of a course in the LMS, but it can be any section from where an LTI® tool can be launched.

```
{  
  "launch": {    "context": {      "id": "2",      "label": "course",      "title": "Course",      "type": [        "CourseSection"      ]    },    ...  },  ...}
```

-   `id` - Context ID. Commonly the ID of a course in the LMS.
-   `label` and `title` - Context name. These two fields usually contain a short and full version of the context name respectively.
-   `type` - Context type.

tip

A list of all possible context types can be found in the IMS Context Type Vocabulary:

Learning Tools Interoperability Core Specification, IMS Final Release Spec Version 1.3, 1EdTech Consortium, April 2019, A.1 Context type vocabulary, [https://www.imsglobal.org/spec/lti/v1p3/#context-type-vocabulary](https://www.imsglobal.org/spec/lti/v1p3/#context-type-vocabulary).

#### resourceLink[​](#resourcelink "Direct link to heading")

The `resourceLink` object contains information regarding the LMS resource link that originated the current LTI® launch. A resource link is most commonly the representation of an activity in the LMS.

```
{  
  "launch": {    "resourceLink": {      "id": "4",      "title": "LTI® Activity 1",      "description": "This is a cool activity"    },    ...  },  ...}
```

-   `id` - Resource link ID. Commonly the ID of an activity in the LMS.
-   `title` - Resource link name.
-   `description` - Resource link description.

#### presentation[​](#presentation "Direct link to heading")

The `presentation` object contains information regarding how the current LTI® launch is being displayed.

```
{  
  "launch": {    "presentation": {      "documentTarget": "iframe",      "locale": "en"    },    ...  },  ...}
```

-   `documentTarget` - Type of LTI® tool visualization. Possible values for this field are `frame`, `iframe` or `window`.
-   `locale` - Language, country, and variant as represented using the [IETF Best Practices for Tags for Identifying Languages](https://www.rfc-editor.org/rfc/rfc5646).

#### custom[​](#custom "Direct link to heading")

The `custom` object contains key-value pairs representing the custom parameters defined in the LMS for that tool. Depending on the LMS you can set these custom parameters globally for a tool or specific to individual launches or locations inside the LMS. Some LMSes also support variable substitution.

```
{  
  "launch": {    "custom": {      "param": "value",      "location": "workspace"    },    ...  },  ...}
```

### Services section[​](#services-section "Direct link to heading")

The `services` section in the LTIAAS ID Token is an object containing information regarding the LTI® services and their availability in the context of a specific LTI® Launch:

```
{  
  "ltiVersion": "1.3.0",  "services": {    "deepLinking": {...},    "namesAndRoles": {...},    "assignmentAndGrades": {...},    "serviceKey": "eyJhbGciajsheu..."  },  ...}
```

#### deepLinking[​](#deeplinking "Direct link to heading")

The `deepLinking` object contains availability information for the *Deep Linking* LTI® service.

```
{  
  "services": {    "deepLinking": {      "available": false    },    ...  },  ...}
```

-   `available` - Availability status for the *Deep Linking* service in the current launch context.

#### namesAndRoles[​](#namesandroles "Direct link to heading")

The `namesAndRoles` object contains availability information for the *Names and Roles Provisioning* LTI® service.

```
{  
  "services": {    "namesAndRoles": {      "available": true    },    ...  },  ...}
```

-   `available` - Availability status for the *Names and Roles Provisioning* service in the current launch context.

#### assignmentAndGrades[​](#assignmentandgrades "Direct link to heading")

The `assignmentAndGrades` object contains availability information for the *Assignment and Grades* LTI® service.

```
{  
  "services": {    "assignmentAndGrades": {      "available": true,      "lineItemId": "https://lms.example.com/course/1/lineitems/1",    },    ...  },  ...}
```

-   `available` - Availability status for the *Assignment and Grades* service in the current launch context.
-   `lineItemId` - Line item ID for the current launch context. This field will only be present if there's only one line item ID associated with the current context.

#### serviceKey[​](#servicekey "Direct link to heading")

The `serviceKey` field contains the service key token that can be used to perform the [service key based API authentication](/guides/api/authentication#service-key-based-authentication). This field is only populated if the current launch context has access to at least one of the *Assignment and Grades* or *Names and Roles Provisioning* LTI® services.

## Additional fields and raw ID Token[​](#additional-fields-and-raw-id-token "Direct link to heading")

This guide focuses on the most common and/or relevant fields of each section in the ID Token object, for a full list of fields currently supported, check the [ID Token endpoint API reference](/api/get-idtoken).

info

If the field you need to build your LTI® integration is not one of the fields we take into account when formatting the ID Token, please fell free to [contact us](/contact-us) and we will make sure to include it in a future update.

Alternatively, you can retrieve a raw version of the ID Token generated by the LMS by sending the `?raw=true` query parameter when calling the `/api/idtoken` endpoint:

```
// Building Ltik based API authentication header  
const authorizationHeader = `LTIK-AUTH-V2 ${API_KEY}:${LTIK}`  
const headers = { Authorization: authorizationHeader }  
// Making /api/idtoken GET request  
const response = requests.get('https://your.ltiaas.com/api/idtoken?raw=true', { headers })  
const userID = response['sub']  
const userEmail = response['email']
```

The response will be an unformatted version of the ID Token object, including every field as sent by the LMS:

```
{  
  "sub": "2",  "iss": "https://lms.example.com",  "aud": "KzJtrQxEUYGWXjx",  "email": "john@lms.com",  "name": "John Doe",  "givenName": "John",  "familyName": "Doe",  "https://purl.imsglobal.org/spec/lti/claim/ext": {...},  "https://purl.imsglobal.org/spec/lti/claim/deployment_id": "1",  "https://purl.imsglobal.org/spec/lti/claim/version": "1.3.0",  "https://purl.imsglobal.org/spec/lti/claim/tool_platform": {...},  "https://purl.imsglobal.org/spec/lti/claim/custom": {...},  "https://purl.imsglobal.org/spec/lti/claim/launch_presentation": {...},  "https://purl.imsglobal.org/spec/lti/claim/roles": [...],  "https://purl.imsglobal.org/spec/lti/claim/context": {...},  "https://purl.imsglobal.org/spec/lti/claim/resource_link": {...},  ...}
```

## Performing SSO[​](#performing-sso "Direct link to heading")

After retrieving the ID Token, you can use the information contained in it to perform SSO and authenticate users into your application, automatically logging them into a preexisting account or provisioning a new one on the spot. There are two main ways of identifying a user:

### Identifying the user by their email[​](#identifying-the-user-by-their-email "Direct link to heading")

One of the quickest ways of identifying a user is through their email:

```
// Building Ltik based API authentication header  
const authorizationHeader = `LTIK-AUTH-V2 ${API_KEY}:${LTIK}`  
const headers = { Authorization: authorizationHeader }  
// Making /api/idtoken GET request  
const response = requests.get('https://your.ltiaas.com/api/idtoken', { headers })  
const userEmail = response['user']['email'] // user@email.com
```

The email contained in the ID Token can be trusted as an identifier for the user that initiated that specific LTI® launch.

caution

The `user.email` field might not be present in the ID Token. The LMS can choose to omit this information based on their privacy rules.

### Identifying the user by their ID[​](#identifying-the-user-by-their-id "Direct link to heading")

The most reliable way of identifying a user is through their ID reported in the ID Token. This ID is only unique within the LMS that originated the LTI® launch, so this value alone is not enough to represent a globally unique user. To get a globally unique identifier, you can combine the value of the user ID with the platform ID:

```
// Building Ltik based API authentication header  
const authorizationHeader = `LTIK-AUTH-V2 ${API_KEY}:${LTIK}`  
const headers = { Authorization: authorizationHeader }  
// Making /api/idtoken GET request  
const response = requests.get('https://your.ltiaas.com/api/idtoken', { headers })  
const platformID = response['platform']['id'] // Y9LENU9n911EMxp9QSrE  
const userID = response['user']['id'] // 2  
// Build globally unique user ID  
const globalUserID = `${platformID}:${userID}`
```

info

You could technically generate a more precise platform identifier by also combining the platform's deployment ID, however, this is largely unnecessary since user IDs should be unique across different instances of the same platform registration.

**Tags:**

-   [API](/tags/api)
-   [ID Token](/tags/id-token)
-   [Tutorials](/tags/tutorials)
</file>

<file path="ltiaas-guides-docs/guides/api/idtoken#performing-sso/index.md">
---
title: Retrieving the ID Token
url: https://docs.ltiaas.com/guides/api/idtoken#performing-sso
source: LTIaaS Documentation
---

# Retrieving the ID Token

-   [](/)
-   [Using the LTIAAS API](/guides/api/introduction)
-   Retrieving the ID Token

On this page

# Retrieving the ID Token

tip

Make sure you've read about [authenticating API requests](/guides/api/authentication) before proceeding to the guide below.

info

The ID Token endpoint only accepts the [ltik based API authentication method](/guides/api/authentication#ltik-based-authentication).

The ID Token is the main piece of data in the LTI® protocol, it's sent by the LMS to the LTI® tool and contains information regarding the current LTI® launch, this includes user information, LMS information, launch context information and everything you need to use the many LTI® services.

LTIAAS gives you access to a launch specific ID Token, formatted for easy of use, through the `/api/idtoken` API endpoint.

![Retrieving ID Token](/assets/ideal-img/flow_idtoken.41ed26f.1118.png)

![Retrieving ID Token](/assets/ideal-img/flow_idtoken_dark.f622c04.1118.png)

Retrieving ID Token

## Calling the ID Token endpoint[​](#calling-the-id-token-endpoint "Direct link to heading")

To retrieve the ID Token related to an LTI® launch, you need to make a GET request to the `/api/idtoken` endpoint of your LTIAAS' account subdomain.

```
// Building Ltik based API authentication header  
const authorizationHeader = `LTIK-AUTH-V2 ${API_KEY}:${LTIK}`  
const headers = { Authorization: authorizationHeader }  
// Making /api/idtoken GET request  
const response = requests.get('https://your.ltiaas.com/api/idtoken', { headers })  
const userInfo = response['user']  
const lmsInfo = response['platform']  
const launchInfo = response['launch']  
const servicesInfo = response['services']
```

You now have everything you need to [perform SSO and let users into your application](#performing-sso).

## Structure of the LTIAAS ID Token[​](#structure-of-the-ltiaas-id-token "Direct link to heading")

info

This guide focuses on the most common and/or relevant fields of each section in the ID Token object, for a full list of fields currently supported, as well as possible API response bodies and statuses, check the [\[GET\] ID Token endpoint API reference](/api/get-idtoken).

LTIAAS formats the raw ID Token sent by the LMS into a developer-friendly format, separating the claims into helpful sections and giving them more human-readable names:

```
{  
  "ltiVersion": "1.3.0",  "user": {...},  "platform": {...},  "launch": {...},  "services": {...}}
```

### User section[​](#user-section "Direct link to heading")

The `user` section in the LTIAAS ID Token is an object containing information provided by the LMS regarding the user that initiated a specific LTI® launch:

```
{  
  "ltiVersion": "1.3.0",  "user": {    "id": "2",    "email": "john@lms.com",    "name": "John Doe",    "givenName": "John",    "familyName": "Doe",    "roles": [      "http://purl.imsglobal.org/vocab/lis/v2/system/person#Administrator"    ],    ...  },  ...}
```

info

Fields containing personal information like `name` and `email` might not be present in the ID Token. The LMS can choose to omit this information based on their privacy rules. The only fields guaranteed to be present in this section are `id` and `roles`.

#### id[​](#id "Direct link to heading")

The `id` field contains the user's identifier inside of the LMS. This ID will probably not be unique between LMSes, so it's not recommended to be used alone as a primary identifier. We go into more detail on this topic in the [performing SSO section](#performing-sso).

#### email[​](#email "Direct link to heading")

The `email` field contains the user's registered email inside of the LMS.

#### name, givenName and familyName[​](#name-givenname-and-familyname "Direct link to heading")

The `name`, `givenName` and `familyName` fields contain the user's registered full name, first last and last name respectively.

#### roles[​](#roles "Direct link to heading")

The `roles` field contains a list of the user's roles within this specific launch context.

tip

A list of all possible roles can be found in the IMS Role Vocabulary:

Learning Tools Interoperability (LTI®) Core Specification, IMS Final Release Spec Version 1.3, 1EdTech Consortium, April 2019, A.2 Role vocabularies, [https://www.imsglobal.org/node/162741#role-vocabularies](https://www.imsglobal.org/node/162741#role-vocabularies).

You can choose to customize your tool's view based on the roles present in this list, for example, showing additional options for user's with variations of the `Instructor` role.

### Platform section[​](#platform-section "Direct link to heading")

The `platform` section in the LTIAAS ID Token is an object containing information regarding the LMS that originated a specific LTI® launch:

```
{  
  "ltiVersion": "1.3.0",  "platform": {    "id": "Y9LENU9n911EMxp9QSrE",    "url": "https://lms.example.com",    "clientId": "KzJtrQxEUYGWXjx",    "deploymentId": "1",    "name": "LMS",    "description": "A great LMS",    "productFamilyCode": "lms",    "version": "2021051712",    ...  },  ...}
```

#### id[​](#id-1 "Direct link to heading")

The `id` field contains the LMS's registration ID inside LTIAAS, generated when you perform a platform registration. This ID is globally unique.

#### url[​](#url "Direct link to heading")

The `url` field contains the LMS's issuer URL. This will match the URL used in the platform registration.

#### clientId[​](#clientid "Direct link to heading")

The `clientId` field contains the identifier generated by LMS for your LTI® tool. This will match the client ID used in the platform registration.

#### deploymentId[​](#deploymentid "Direct link to heading")

The `deploymentId` field contains the identifier for one specific instance of the LMS. This is most relevant when dealing with an LMS that uses multi-tenancy (Blackboard, for example), since this means that every instance of this LMS will share a single platform registration. The deployment ID will allow you to track and/or control access between the various instances of such LMSes.

#### name and description[​](#name-and-description "Direct link to heading")

The `name` and `description` fields contain the LMS's name and description as used in the platform registration.

#### productFamilyCode[​](#productfamilycode "Direct link to heading")

The `productFamilyCode` field contains an identifier for that family of LMSes. This allows you to identify the type of LMS and maybe customize your tool accordingly. Common examples are: `moodle`, `canvas` and `BlackboardLearn`.

#### version[​](#version "Direct link to heading")

The `version` field contains the LMS version inside its own versioning system.

### Launch section[​](#launch-section "Direct link to heading")

The `launch` section in the LTIAAS ID Token is an object containing information specific to the actual LTI® Launch:

```
{  
  "ltiVersion": "1.3.0",  "launch": {    "context": {...},    "resourceLink": {...},    "presentation": {...},    "custom": {...}  },  ...}
```

#### context[​](#context "Direct link to heading")

The `context` object contains information regarding the LMS context where the LTI® launch was originated. A context is most commonly the representation of a course in the LMS, but it can be any section from where an LTI® tool can be launched.

```
{  
  "launch": {    "context": {      "id": "2",      "label": "course",      "title": "Course",      "type": [        "CourseSection"      ]    },    ...  },  ...}
```

-   `id` - Context ID. Commonly the ID of a course in the LMS.
-   `label` and `title` - Context name. These two fields usually contain a short and full version of the context name respectively.
-   `type` - Context type.

tip

A list of all possible context types can be found in the IMS Context Type Vocabulary:

Learning Tools Interoperability Core Specification, IMS Final Release Spec Version 1.3, 1EdTech Consortium, April 2019, A.1 Context type vocabulary, [https://www.imsglobal.org/spec/lti/v1p3/#context-type-vocabulary](https://www.imsglobal.org/spec/lti/v1p3/#context-type-vocabulary).

#### resourceLink[​](#resourcelink "Direct link to heading")

The `resourceLink` object contains information regarding the LMS resource link that originated the current LTI® launch. A resource link is most commonly the representation of an activity in the LMS.

```
{  
  "launch": {    "resourceLink": {      "id": "4",      "title": "LTI® Activity 1",      "description": "This is a cool activity"    },    ...  },  ...}
```

-   `id` - Resource link ID. Commonly the ID of an activity in the LMS.
-   `title` - Resource link name.
-   `description` - Resource link description.

#### presentation[​](#presentation "Direct link to heading")

The `presentation` object contains information regarding how the current LTI® launch is being displayed.

```
{  
  "launch": {    "presentation": {      "documentTarget": "iframe",      "locale": "en"    },    ...  },  ...}
```

-   `documentTarget` - Type of LTI® tool visualization. Possible values for this field are `frame`, `iframe` or `window`.
-   `locale` - Language, country, and variant as represented using the [IETF Best Practices for Tags for Identifying Languages](https://www.rfc-editor.org/rfc/rfc5646).

#### custom[​](#custom "Direct link to heading")

The `custom` object contains key-value pairs representing the custom parameters defined in the LMS for that tool. Depending on the LMS you can set these custom parameters globally for a tool or specific to individual launches or locations inside the LMS. Some LMSes also support variable substitution.

```
{  
  "launch": {    "custom": {      "param": "value",      "location": "workspace"    },    ...  },  ...}
```

### Services section[​](#services-section "Direct link to heading")

The `services` section in the LTIAAS ID Token is an object containing information regarding the LTI® services and their availability in the context of a specific LTI® Launch:

```
{  
  "ltiVersion": "1.3.0",  "services": {    "deepLinking": {...},    "namesAndRoles": {...},    "assignmentAndGrades": {...},    "serviceKey": "eyJhbGciajsheu..."  },  ...}
```

#### deepLinking[​](#deeplinking "Direct link to heading")

The `deepLinking` object contains availability information for the *Deep Linking* LTI® service.

```
{  
  "services": {    "deepLinking": {      "available": false    },    ...  },  ...}
```

-   `available` - Availability status for the *Deep Linking* service in the current launch context.

#### namesAndRoles[​](#namesandroles "Direct link to heading")

The `namesAndRoles` object contains availability information for the *Names and Roles Provisioning* LTI® service.

```
{  
  "services": {    "namesAndRoles": {      "available": true    },    ...  },  ...}
```

-   `available` - Availability status for the *Names and Roles Provisioning* service in the current launch context.

#### assignmentAndGrades[​](#assignmentandgrades "Direct link to heading")

The `assignmentAndGrades` object contains availability information for the *Assignment and Grades* LTI® service.

```
{  
  "services": {    "assignmentAndGrades": {      "available": true,      "lineItemId": "https://lms.example.com/course/1/lineitems/1",    },    ...  },  ...}
```

-   `available` - Availability status for the *Assignment and Grades* service in the current launch context.
-   `lineItemId` - Line item ID for the current launch context. This field will only be present if there's only one line item ID associated with the current context.

#### serviceKey[​](#servicekey "Direct link to heading")

The `serviceKey` field contains the service key token that can be used to perform the [service key based API authentication](/guides/api/authentication#service-key-based-authentication). This field is only populated if the current launch context has access to at least one of the *Assignment and Grades* or *Names and Roles Provisioning* LTI® services.

## Additional fields and raw ID Token[​](#additional-fields-and-raw-id-token "Direct link to heading")

This guide focuses on the most common and/or relevant fields of each section in the ID Token object, for a full list of fields currently supported, check the [ID Token endpoint API reference](/api/get-idtoken).

info

If the field you need to build your LTI® integration is not one of the fields we take into account when formatting the ID Token, please fell free to [contact us](/contact-us) and we will make sure to include it in a future update.

Alternatively, you can retrieve a raw version of the ID Token generated by the LMS by sending the `?raw=true` query parameter when calling the `/api/idtoken` endpoint:

```
// Building Ltik based API authentication header  
const authorizationHeader = `LTIK-AUTH-V2 ${API_KEY}:${LTIK}`  
const headers = { Authorization: authorizationHeader }  
// Making /api/idtoken GET request  
const response = requests.get('https://your.ltiaas.com/api/idtoken?raw=true', { headers })  
const userID = response['sub']  
const userEmail = response['email']
```

The response will be an unformatted version of the ID Token object, including every field as sent by the LMS:

```
{  
  "sub": "2",  "iss": "https://lms.example.com",  "aud": "KzJtrQxEUYGWXjx",  "email": "john@lms.com",  "name": "John Doe",  "givenName": "John",  "familyName": "Doe",  "https://purl.imsglobal.org/spec/lti/claim/ext": {...},  "https://purl.imsglobal.org/spec/lti/claim/deployment_id": "1",  "https://purl.imsglobal.org/spec/lti/claim/version": "1.3.0",  "https://purl.imsglobal.org/spec/lti/claim/tool_platform": {...},  "https://purl.imsglobal.org/spec/lti/claim/custom": {...},  "https://purl.imsglobal.org/spec/lti/claim/launch_presentation": {...},  "https://purl.imsglobal.org/spec/lti/claim/roles": [...],  "https://purl.imsglobal.org/spec/lti/claim/context": {...},  "https://purl.imsglobal.org/spec/lti/claim/resource_link": {...},  ...}
```

## Performing SSO[​](#performing-sso "Direct link to heading")

After retrieving the ID Token, you can use the information contained in it to perform SSO and authenticate users into your application, automatically logging them into a preexisting account or provisioning a new one on the spot. There are two main ways of identifying a user:

### Identifying the user by their email[​](#identifying-the-user-by-their-email "Direct link to heading")

One of the quickest ways of identifying a user is through their email:

```
// Building Ltik based API authentication header  
const authorizationHeader = `LTIK-AUTH-V2 ${API_KEY}:${LTIK}`  
const headers = { Authorization: authorizationHeader }  
// Making /api/idtoken GET request  
const response = requests.get('https://your.ltiaas.com/api/idtoken', { headers })  
const userEmail = response['user']['email'] // user@email.com
```

The email contained in the ID Token can be trusted as an identifier for the user that initiated that specific LTI® launch.

caution

The `user.email` field might not be present in the ID Token. The LMS can choose to omit this information based on their privacy rules.

### Identifying the user by their ID[​](#identifying-the-user-by-their-id "Direct link to heading")

The most reliable way of identifying a user is through their ID reported in the ID Token. This ID is only unique within the LMS that originated the LTI® launch, so this value alone is not enough to represent a globally unique user. To get a globally unique identifier, you can combine the value of the user ID with the platform ID:

```
// Building Ltik based API authentication header  
const authorizationHeader = `LTIK-AUTH-V2 ${API_KEY}:${LTIK}`  
const headers = { Authorization: authorizationHeader }  
// Making /api/idtoken GET request  
const response = requests.get('https://your.ltiaas.com/api/idtoken', { headers })  
const platformID = response['platform']['id'] // Y9LENU9n911EMxp9QSrE  
const userID = response['user']['id'] // 2  
// Build globally unique user ID  
const globalUserID = `${platformID}:${userID}`
```

info

You could technically generate a more precise platform identifier by also combining the platform's deployment ID, however, this is largely unnecessary since user IDs should be unique across different instances of the same platform registration.

**Tags:**

-   [API](/tags/api)
-   [ID Token](/tags/id-token)
-   [Tutorials](/tags/tutorials)
</file>

<file path="ltiaas-guides-docs/guides/api/introduction/index.md">
---
title: Using the LTIAAS API
url: https://docs.ltiaas.com/guides/api/introduction
source: LTIaaS Documentation
---

# Using the LTIAAS API

-   [](/)
-   Using the LTIAAS API

On this page

# Using the LTIAAS API

## Section summary[​](#section-summary "Direct link to heading")

This section will provide you with useful guides on how to use the LTIAAS API to interact with the many LTI® services we support.

[

## 📄️ Authenticating API requests

How to authenticate API requests.

](/guides/api/authentication)

[

## 📄️ Retrieving the ID Token

How to retrieve the ID Token and use it to perform SSO.

](/guides/api/idtoken)

[

## 📄️ Retrieving course roster

How to retrieve the course roster.

](/guides/api/roster)

[

## 📄️ Manipulating grade lines

How to manipulate grade lines in the LMS grade book.

](/guides/api/manipulating-grade-lines)

[

## 📄️ Manipulating grades

How to manipulate grades in the LMS grade book.

](/guides/api/manipulating-grades)

[

## 📄️ Performing Deep Linking

How to perform deep linking and create activities.

](/guides/api/deeplinking)

[

## 📄️ Performing Dynamic Registration

How to perform dynamic registration

](/guides/api/dynamic-registration)

[

## 📄️ Handling pagination

How to handle pagination and limit results.

](/guides/api/pagination)

[

## 📄️ Accessing the API asynchronously

How to access the API outside of an LTI® launch.

](/guides/api/async)

## Next steps[​](#next-steps "Direct link to heading")

You can start by learning how to authenticate LTIAAS API requests. Please see the [Authenticating API requests](/guides/api/authentication) guide for more information.

**Tags:**

-   [API](/tags/api)
</file>

<file path="ltiaas-guides-docs/guides/api/manipulating-grade-lines/index.md">
---
title: Manipulating grade lines
url: https://docs.ltiaas.com/guides/api/manipulating-grade-lines
source: LTIaaS Documentation
---

# Manipulating grade lines

-   [](/)
-   [Using the LTIAAS API](/guides/api/introduction)
-   Manipulating grade lines

On this page

# Manipulating grade lines

tip

Make sure you've read about [authenticating API requests](/guides/api/authentication) before proceeding to the guide below.

info

The Line items endpoint accepts both the [ltik based](/guides/api/authentication#ltik-based-authentication) and [service key based](/guides/api/authentication#service-key-based-authentication) API authentication methods.

The LTI® protocol allows you to manipulate grade lines in the LMS grade book through the *Assignment and Grades - Line Items* service. In the context of LTI®, these grade lines are called *line items*. LTIAAS gives you access to this service through the `/api/lineitems` API endpoint.

![Accessing line items API](/assets/ideal-img/flow_lineitems.3a6dadb.1118.png)

![Accessing line items API](/assets/ideal-img/flow_lineitems_dark.0ea3775.1118.png)

Accessing line items API

## The line item object[​](#the-line-item-object "Direct link to heading")

info

This guide focuses on the most common and/or relevant fields of the line item object, a detailed description of available fields can be found in the IMS Line Item Service documentation:

Learning Tools Interoperability (LTI®) Assignment and Grade Services Specification, IMS Final Release Spec Version 2.0, 1EdTech Consortium, April 2019, 3.2 Line item service scope and allowed http methods, [https://www.imsglobal.org/spec/lti-ags/v2p0/#line-item-service-scope-and-allowed-http-methods](https://www.imsglobal.org/spec/lti-ags/v2p0/#line-item-service-scope-and-allowed-http-methods).

The *line item* is the LTI® representation of a grade line in the LMS grade book. Each line item contains information about the grade line it represents.

```
{  
  "id": "https://lms.example.com/course/1/lineitems/1",  "scoreMaximum" : 100,  "label" : "Activity 1",  "tag" : "activity",  "resourceLinkId" : "1g3k4dlk49fk",  "resourceId" : "my-tool-activity-1"}
```

#### id[​](#id "Direct link to heading")

The `id` field is the identifier for the line item and it's a URL that points to a specific grade line in the LMS grade book. This field is automatically populated by the LMS when the line item is created.

#### scoreMaximum \[*required*\][​](#scoremaximum-required "Direct link to heading")

The `scoreMaximum` field is the maximum score that can be assigned to the line item. MUST be a numeric non-null value, strictly greater than 0.

#### label \[*required*\][​](#label-required "Direct link to heading")

The `label` field is the name of the grade line represented by the line item.

#### tag[​](#tag "Direct link to heading")

The `tag` field is a string that can be used to further identify grade lines and group them together.

#### resourceLinkId[​](#resourcelinkid "Direct link to heading")

The `resourceLinkId` field is the identifier of the resource link (activity) this grade line is associated with in the LMS.

#### resourceId[​](#resourceid "Direct link to heading")

The `resourceId` field is a tool provided identifier of the resource that this grade line is associated with inside the LTI® tool.

## Creating a grade line[​](#creating-a-grade-line "Direct link to heading")

To create grade lines, you need to make a POST request to the `/api/lineitems` endpoint of your LTIAAS' account subdomain. The created line item will be associated with the context that originated the LTI® launch.

tip

For a description of all accepted fields, as well as possible response bodies and statuses, check the [\[POST\] Line Items endpoint API Reference](/api/post-api-lineitems).

```
// Building Ltik based API authentication header  
const authorizationHeader = `LTIK-AUTH-V2 ${API_KEY}:${LTIK}`  
const headers = { Authorization: authorizationHeader }  
// Making /api/lineitems POST request  
const body = {  
  label: 'Activity 1',  scoreMaximum: 100}  
const response = requests.post('https://your.ltiaas.com/api/lineitems', body, { headers })
```

info

When creating a new grade line, the `label` and `scoreMaximum` fields are required.

A successful response will contain the newly created line item object with the `id` field populated and any other additional accepted fields you may have provided.

```
{  
  "id": "https://lms.example.com/course/1/lineitems/1",  "scoreMaximum" : 100,  "label" : "Activity 1"}
```

### Binding a grade line to an activity[​](#binding-a-grade-line-to-an-activity "Direct link to heading")

If you want to bind a new grade line to a specific activity in the LMS, you can populate the `resourceLinkId` field in the request body.

tip

The resource link ID for an activity can be retrieved from the `idtoken.launch.resourceLink.id` field of the [ID Token](/guides/api/idtoken) generated by launching the LTI® tool from that activity.

```
// Building Ltik based API authentication header  
const authorizationHeader = `LTIK-AUTH-V2 ${API_KEY}:${LTIK}`  
const headers = { Authorization: authorizationHeader }  
// Making /api/idtoken GET request  
const idtoken = requests.get('https://your.ltiaas.com/api/idtoken', { headers })  
const resourceLinkId = response['launch']['resourceLink']['id']  
// Making /api/lineitems POST request  
const body = {  
  label: 'Activity 1',  scoreMaximum: 100,  resourceLinkId: resourceLinkId}  
const response = requests.post('https://your.ltiaas.com/api/lineitems', body, { headers })
```

tip

Adding a resourceLinkId allows you to later [search for grade lines associated a specific activity](#filtering-grade-lines-by-the-associated-activity).

### Binding a grade line to a tool resource[​](#binding-a-grade-line-to-a-tool-resource "Direct link to heading")

If you want to bind a new grade line to a specific resource inside your LTI® tool, you can populate the `resourceId` field in the request body with an identifier for your internal resource.

```
// Building Ltik based API authentication header  
const authorizationHeader = `LTIK-AUTH-V2 ${API_KEY}:${LTIK}`  
const headers = { Authorization: authorizationHeader }  
// Making /api/lineitems POST request  
const body = {  
  label: 'Activity 1',  scoreMaximum: 100,  resourceId: 'my-tool-activity-1'}  
const response = requests.post('https://your.ltiaas.com/api/lineitems', body, { headers })
```

tip

Adding a resourceId allows you to later [search for grade lines associated a specific resource inside your LTI® tool](#filtering-grade-lines-by-the-associated-tool-resource).

## Retrieving grade lines for a context[​](#retrieving-grade-lines-for-a-context "Direct link to heading")

To retrieve grade lines from an LTI® context you need to make a GET request to the `/api/lineitems` endpoint of your LTIAAS' account subdomain.

tip

For a description of all accepted query parameters, as well as possible response bodies and statuses, check the [\[GET\] Line Items endpoint API Reference](/api/post-api-lineitems).

```
// Building Ltik based API authentication header  
const authorizationHeader = `LTIK-AUTH-V2 ${API_KEY}:${LTIK}`  
const headers = { Authorization: authorizationHeader }  
// Making /api/lineitems GET request  
const response = requests.get('https://your.ltiaas.com/api/lineitems', { headers })  
const lineItems = response['lineItems']
```

A successful response will be an object with a `lineItems` field containing an array of line item objects tied to that LTI® context.

```
{  
  "lineItems": [    {      "id": "https://lms.example.com/course/1/lineitems/1",      "scoreMaximum" : 100,      "label" : "Activity 1"    },    {      "id": "https://lms.example.com/course/1/lineitems/2",      "scoreMaximum" : 100,      "label" : "Activity 2"    }  ]}
```

#### Response pagination fields[​](#response-pagination-fields "Direct link to heading")

caution

This functionality might not be supported by every LMS.

The `next`, `prev`, `first` and `last` fields will only be present if there are more line items to be retrieved from the context. You can read more about this in the [Handling pagination guide](/guides/api/pagination).

```
{  
  "lineItems": [...],  "next": "https://lms.example.com/course/1/lineitems?page=3",  "prev": "https://lms.example.com/course/1/lineitems?page=1",  "first": "https://lms.example.com/course/1/lineitems?page=1",  "last": "https://lms.example.com/course/1/lineitems?page=4"}
```

### Filtering grade lines by the associated activity[​](#filtering-grade-lines-by-the-associated-activity "Direct link to heading")

If you want to retrieve only the grade lines associated to a specific activity, you can populate the `resourceLinkId` query parameter.

tip

The resource link ID for an activity can be retrieved from the `idtoken.launch.resourceLink.id` field of the [ID Token](/guides/api/idtoken) generated by launching the LTI® tool from that activity.

```
// Building Ltik based API authentication header  
const authorizationHeader = `LTIK-AUTH-V2 ${API_KEY}:${LTIK}`  
const headers = { Authorization: authorizationHeader }  
// Making /api/idtoken GET request  
const idtoken = requests.get('https://your.ltiaas.com/api/idtoken', { headers })  
const resourceLinkId = response['launch']['resourceLink']['id']  
// Making /api/lineitems GET request  
const response = requests.get(`https://your.ltiaas.com/api/lineitems?resourceLinkId=${resourceLinkId}`, { headers })  
const lineItems = response['lineItems']
```

### Filtering grade lines by the associated tool resource[​](#filtering-grade-lines-by-the-associated-tool-resource "Direct link to heading")

If you want to retrieve only the grade lines associated to a specific tool resource, you can populate the `resourceId` query parameter with an identifier for your internal resource.

```
// Building Ltik based API authentication header  
const authorizationHeader = `LTIK-AUTH-V2 ${API_KEY}:${LTIK}`  
const headers = { Authorization: authorizationHeader }  
// Making /api/lineitems GET request  
const resourceId = 'my-tool-activity-1'  
const response = requests.get(`https://your.ltiaas.com/api/lineitems?resourceId=${resourceId}`, { headers })  
const lineItems = response['lineItems']
```

### Retrieving a grade line ID from the ID Token[​](#retrieving-a-grade-line-id-from-the-id-token "Direct link to heading")

If there is only one grade line associated with a certain LTI® context, its ID might be present in the ID Token generated for that context in the `idtoken.services.assignmentAndGrades.lineItemId` field.

```
// Building Ltik based API authentication header  
const authorizationHeader = `LTIK-AUTH-V2 ${API_KEY}:${LTIK}`  
const headers = { Authorization: authorizationHeader }  
// Making /api/idtoken GET request  
const idtoken = requests.get('https://your.ltiaas.com/api/idtoken', { headers })  
const lineItemID = idtoken['services']['assignmentAndGrades']['lineItemId']
```

## Retrieving a grade line by its ID[​](#retrieving-a-grade-line-by-its-id "Direct link to heading")

To retrieve a grade line by its ID you need to make a GET request to the `/api/lineitems/:lineItemID` endpoint of your LTIAAS' account subdomain.

tip

For a description of possible response bodies and statuses, check the [\[GET\] Line Item endpoint API Reference](/api/get-lineitem).

info

Line item IDs are URLs, so their value needs to be URL encoded to be safely sent as a query parameter.

```
// Building Ltik based API authentication header  
const authorizationHeader = `LTIK-AUTH-V2 ${API_KEY}:${LTIK}`  
const headers = { Authorization: authorizationHeader }  
// Making /api/lineitems/:lineItemID GET request  
const lineItemId = 'https://lms.example.com/course/1/lineitems/1'  
const urlSafeLineItemId = encodeURIComponent(lineItemId)  
const lineItem = requests.get(`https://your.ltiaas.com/api/lineitems/${urlSafeLineItemId}`, { headers })
```

A successful response will contain the requested line item object.

```
{  
  "id": "https://lms.example.com/course/1/lineitems/1",  "scoreMaximum" : 95,  "label" : "Activity 1 - New name"}
```

## Updating a grade line by its ID[​](#updating-a-grade-line-by-its-id "Direct link to heading")

To update a grade line you need to make a PUT request to the `/api/lineitems/:lineItemID` endpoint of your LTIAAS' account subdomain.

tip

For a description of all accepted fields, as well as possible response bodies and statuses, check the [\[PUT\] Line Item endpoint API Reference](/api/put-api-lineitems-lineitemid).

info

Line item IDs are URLs, so their value needs to be URL encoded to be safely sent as a query parameter.

```
// Building Ltik based API authentication header  
const authorizationHeader = `LTIK-AUTH-V2 ${API_KEY}:${LTIK}`  
const headers = { Authorization: authorizationHeader }  
// Making /api/lineitems/:lineItemID PUT request  
const body = {  
  label: 'Activity 1 - New name' // Updating the name  scoreMaximum: 95 // Updating the maximum score}  
const lineItemId = 'https://lms.example.com/course/1/lineitems/1'  
const urlSafeLineItemId = encodeURIComponent(lineItemId)  
const response = requests.put(`https://your.ltiaas.com/api/lineitems/${urlSafeLineItemId}`, body, { headers })
```

info

The body you send will replace the information of the existing grade line. For this reason, similar to when creating a new grade line, the `label` and `scoreMaximum` fields are required.

caution

Fields present in the previous version of the grade line and missing from the new body will be deleted.

A successful response will contain the updated line item object.

```
{  
  "id": "https://lms.example.com/course/1/lineitems/1",  "scoreMaximum" : 95,  "label" : "Activity 1 - New name"}
```

## Deleting a grade line by its ID[​](#deleting-a-grade-line-by-its-id "Direct link to heading")

To delete a grade line related to the context that originated an LTI® launch, you need to make a DELETE request to the `/api/lineitems/:lineItemID` endpoint of your LTIAAS' account subdomain.

tip

For a description of possible response statuses, check the [\[DELETE\] Line Item endpoint API Reference](/api/delete-api-lineitems-lineitemid).

info

Line item IDs are URLs, so their value needs to be URL encoded to be safely sent as a query parameter.

```
// Building Ltik based API authentication header  
const authorizationHeader = `LTIK-AUTH-V2 ${API_KEY}:${LTIK}`  
const headers = { Authorization: authorizationHeader }  
// Making /api/lineitems/:lineItemID DELETE request  
const lineItemId = 'https://lms.example.com/course/1/lineitems/1'  
const urlSafeLineItemId = encodeURIComponent(lineItemId)  
requests.delete(`https://your.ltiaas.com/api/lineitems/${urlSafeLineItemId}`, { headers })
```

## Checking service availability[​](#checking-service-availability "Direct link to heading")

The *Assignment and Grades* service might not be available for every LTI® launch context. Before attempting to manipulate grade lines you can [make a call to the ID Token endpoint](/guides/api/idtoken) and check the [services section](/guides/api/idtoken#assignmentandgrades) to know if the service is available.

You can know if the service is available based on the value of the `idtoken.services.assignmentAndGrades.available` boolean field:

```
// Building Ltik based API authentication header  
const authorizationHeader = `LTIK-AUTH-V2 ${API_KEY}:${LTIK}`  
const headers = { Authorization: authorizationHeader }  
// Making /api/idtoken GET request  
const idtoken = requests.get('https://your.ltiaas.com/api/idtoken', { headers })  
const isServiceAvailable = idtoken['services']['assignmentAndGrades']['available']  

if (isServiceAvailable) {  
  // Making /api/lineitems GET request  const response = requests.get(`https://your.ltiaas.com/api/lineitenms`, { headers })  const members = response['lineItems']}
```

**Tags:**

-   [API](/tags/api)
-   [Grades](/tags/grades)
-   [Grade lines](/tags/grade-lines)
-   [Tutorials](/tags/tutorials)
</file>

<file path="ltiaas-guides-docs/guides/api/manipulating-grade-lines#retrieving-grade-lines-for-a-context/index.md">
---
title: Manipulating grade lines
url: https://docs.ltiaas.com/guides/api/manipulating-grade-lines#retrieving-grade-lines-for-a-context
source: LTIaaS Documentation
---

# Manipulating grade lines

-   [](/)
-   [Using the LTIAAS API](/guides/api/introduction)
-   Manipulating grade lines

On this page

# Manipulating grade lines

tip

Make sure you've read about [authenticating API requests](/guides/api/authentication) before proceeding to the guide below.

info

The Line items endpoint accepts both the [ltik based](/guides/api/authentication#ltik-based-authentication) and [service key based](/guides/api/authentication#service-key-based-authentication) API authentication methods.

The LTI® protocol allows you to manipulate grade lines in the LMS grade book through the *Assignment and Grades - Line Items* service. In the context of LTI®, these grade lines are called *line items*. LTIAAS gives you access to this service through the `/api/lineitems` API endpoint.

![Accessing line items API](/assets/ideal-img/flow_lineitems.3a6dadb.1118.png)

![Accessing line items API](/assets/ideal-img/flow_lineitems_dark.0ea3775.1118.png)

Accessing line items API

## The line item object[​](#the-line-item-object "Direct link to heading")

info

This guide focuses on the most common and/or relevant fields of the line item object, a detailed description of available fields can be found in the IMS Line Item Service documentation:

Learning Tools Interoperability (LTI®) Assignment and Grade Services Specification, IMS Final Release Spec Version 2.0, 1EdTech Consortium, April 2019, 3.2 Line item service scope and allowed http methods, [https://www.imsglobal.org/spec/lti-ags/v2p0/#line-item-service-scope-and-allowed-http-methods](https://www.imsglobal.org/spec/lti-ags/v2p0/#line-item-service-scope-and-allowed-http-methods).

The *line item* is the LTI® representation of a grade line in the LMS grade book. Each line item contains information about the grade line it represents.

```
{  
  "id": "https://lms.example.com/course/1/lineitems/1",  "scoreMaximum" : 100,  "label" : "Activity 1",  "tag" : "activity",  "resourceLinkId" : "1g3k4dlk49fk",  "resourceId" : "my-tool-activity-1"}
```

#### id[​](#id "Direct link to heading")

The `id` field is the identifier for the line item and it's a URL that points to a specific grade line in the LMS grade book. This field is automatically populated by the LMS when the line item is created.

#### scoreMaximum \[*required*\][​](#scoremaximum-required "Direct link to heading")

The `scoreMaximum` field is the maximum score that can be assigned to the line item. MUST be a numeric non-null value, strictly greater than 0.

#### label \[*required*\][​](#label-required "Direct link to heading")

The `label` field is the name of the grade line represented by the line item.

#### tag[​](#tag "Direct link to heading")

The `tag` field is a string that can be used to further identify grade lines and group them together.

#### resourceLinkId[​](#resourcelinkid "Direct link to heading")

The `resourceLinkId` field is the identifier of the resource link (activity) this grade line is associated with in the LMS.

#### resourceId[​](#resourceid "Direct link to heading")

The `resourceId` field is a tool provided identifier of the resource that this grade line is associated with inside the LTI® tool.

## Creating a grade line[​](#creating-a-grade-line "Direct link to heading")

To create grade lines, you need to make a POST request to the `/api/lineitems` endpoint of your LTIAAS' account subdomain. The created line item will be associated with the context that originated the LTI® launch.

tip

For a description of all accepted fields, as well as possible response bodies and statuses, check the [\[POST\] Line Items endpoint API Reference](/api/post-api-lineitems).

```
// Building Ltik based API authentication header  
const authorizationHeader = `LTIK-AUTH-V2 ${API_KEY}:${LTIK}`  
const headers = { Authorization: authorizationHeader }  
// Making /api/lineitems POST request  
const body = {  
  label: 'Activity 1',  scoreMaximum: 100}  
const response = requests.post('https://your.ltiaas.com/api/lineitems', body, { headers })
```

info

When creating a new grade line, the `label` and `scoreMaximum` fields are required.

A successful response will contain the newly created line item object with the `id` field populated and any other additional accepted fields you may have provided.

```
{  
  "id": "https://lms.example.com/course/1/lineitems/1",  "scoreMaximum" : 100,  "label" : "Activity 1"}
```

### Binding a grade line to an activity[​](#binding-a-grade-line-to-an-activity "Direct link to heading")

If you want to bind a new grade line to a specific activity in the LMS, you can populate the `resourceLinkId` field in the request body.

tip

The resource link ID for an activity can be retrieved from the `idtoken.launch.resourceLink.id` field of the [ID Token](/guides/api/idtoken) generated by launching the LTI® tool from that activity.

```
// Building Ltik based API authentication header  
const authorizationHeader = `LTIK-AUTH-V2 ${API_KEY}:${LTIK}`  
const headers = { Authorization: authorizationHeader }  
// Making /api/idtoken GET request  
const idtoken = requests.get('https://your.ltiaas.com/api/idtoken', { headers })  
const resourceLinkId = response['launch']['resourceLink']['id']  
// Making /api/lineitems POST request  
const body = {  
  label: 'Activity 1',  scoreMaximum: 100,  resourceLinkId: resourceLinkId}  
const response = requests.post('https://your.ltiaas.com/api/lineitems', body, { headers })
```

tip

Adding a resourceLinkId allows you to later [search for grade lines associated a specific activity](#filtering-grade-lines-by-the-associated-activity).

### Binding a grade line to a tool resource[​](#binding-a-grade-line-to-a-tool-resource "Direct link to heading")

If you want to bind a new grade line to a specific resource inside your LTI® tool, you can populate the `resourceId` field in the request body with an identifier for your internal resource.

```
// Building Ltik based API authentication header  
const authorizationHeader = `LTIK-AUTH-V2 ${API_KEY}:${LTIK}`  
const headers = { Authorization: authorizationHeader }  
// Making /api/lineitems POST request  
const body = {  
  label: 'Activity 1',  scoreMaximum: 100,  resourceId: 'my-tool-activity-1'}  
const response = requests.post('https://your.ltiaas.com/api/lineitems', body, { headers })
```

tip

Adding a resourceId allows you to later [search for grade lines associated a specific resource inside your LTI® tool](#filtering-grade-lines-by-the-associated-tool-resource).

## Retrieving grade lines for a context[​](#retrieving-grade-lines-for-a-context "Direct link to heading")

To retrieve grade lines from an LTI® context you need to make a GET request to the `/api/lineitems` endpoint of your LTIAAS' account subdomain.

tip

For a description of all accepted query parameters, as well as possible response bodies and statuses, check the [\[GET\] Line Items endpoint API Reference](/api/post-api-lineitems).

```
// Building Ltik based API authentication header  
const authorizationHeader = `LTIK-AUTH-V2 ${API_KEY}:${LTIK}`  
const headers = { Authorization: authorizationHeader }  
// Making /api/lineitems GET request  
const response = requests.get('https://your.ltiaas.com/api/lineitems', { headers })  
const lineItems = response['lineItems']
```

A successful response will be an object with a `lineItems` field containing an array of line item objects tied to that LTI® context.

```
{  
  "lineItems": [    {      "id": "https://lms.example.com/course/1/lineitems/1",      "scoreMaximum" : 100,      "label" : "Activity 1"    },    {      "id": "https://lms.example.com/course/1/lineitems/2",      "scoreMaximum" : 100,      "label" : "Activity 2"    }  ]}
```

#### Response pagination fields[​](#response-pagination-fields "Direct link to heading")

caution

This functionality might not be supported by every LMS.

The `next`, `prev`, `first` and `last` fields will only be present if there are more line items to be retrieved from the context. You can read more about this in the [Handling pagination guide](/guides/api/pagination).

```
{  
  "lineItems": [...],  "next": "https://lms.example.com/course/1/lineitems?page=3",  "prev": "https://lms.example.com/course/1/lineitems?page=1",  "first": "https://lms.example.com/course/1/lineitems?page=1",  "last": "https://lms.example.com/course/1/lineitems?page=4"}
```

### Filtering grade lines by the associated activity[​](#filtering-grade-lines-by-the-associated-activity "Direct link to heading")

If you want to retrieve only the grade lines associated to a specific activity, you can populate the `resourceLinkId` query parameter.

tip

The resource link ID for an activity can be retrieved from the `idtoken.launch.resourceLink.id` field of the [ID Token](/guides/api/idtoken) generated by launching the LTI® tool from that activity.

```
// Building Ltik based API authentication header  
const authorizationHeader = `LTIK-AUTH-V2 ${API_KEY}:${LTIK}`  
const headers = { Authorization: authorizationHeader }  
// Making /api/idtoken GET request  
const idtoken = requests.get('https://your.ltiaas.com/api/idtoken', { headers })  
const resourceLinkId = response['launch']['resourceLink']['id']  
// Making /api/lineitems GET request  
const response = requests.get(`https://your.ltiaas.com/api/lineitems?resourceLinkId=${resourceLinkId}`, { headers })  
const lineItems = response['lineItems']
```

### Filtering grade lines by the associated tool resource[​](#filtering-grade-lines-by-the-associated-tool-resource "Direct link to heading")

If you want to retrieve only the grade lines associated to a specific tool resource, you can populate the `resourceId` query parameter with an identifier for your internal resource.

```
// Building Ltik based API authentication header  
const authorizationHeader = `LTIK-AUTH-V2 ${API_KEY}:${LTIK}`  
const headers = { Authorization: authorizationHeader }  
// Making /api/lineitems GET request  
const resourceId = 'my-tool-activity-1'  
const response = requests.get(`https://your.ltiaas.com/api/lineitems?resourceId=${resourceId}`, { headers })  
const lineItems = response['lineItems']
```

### Retrieving a grade line ID from the ID Token[​](#retrieving-a-grade-line-id-from-the-id-token "Direct link to heading")

If there is only one grade line associated with a certain LTI® context, its ID might be present in the ID Token generated for that context in the `idtoken.services.assignmentAndGrades.lineItemId` field.

```
// Building Ltik based API authentication header  
const authorizationHeader = `LTIK-AUTH-V2 ${API_KEY}:${LTIK}`  
const headers = { Authorization: authorizationHeader }  
// Making /api/idtoken GET request  
const idtoken = requests.get('https://your.ltiaas.com/api/idtoken', { headers })  
const lineItemID = idtoken['services']['assignmentAndGrades']['lineItemId']
```

## Retrieving a grade line by its ID[​](#retrieving-a-grade-line-by-its-id "Direct link to heading")

To retrieve a grade line by its ID you need to make a GET request to the `/api/lineitems/:lineItemID` endpoint of your LTIAAS' account subdomain.

tip

For a description of possible response bodies and statuses, check the [\[GET\] Line Item endpoint API Reference](/api/get-lineitem).

info

Line item IDs are URLs, so their value needs to be URL encoded to be safely sent as a query parameter.

```
// Building Ltik based API authentication header  
const authorizationHeader = `LTIK-AUTH-V2 ${API_KEY}:${LTIK}`  
const headers = { Authorization: authorizationHeader }  
// Making /api/lineitems/:lineItemID GET request  
const lineItemId = 'https://lms.example.com/course/1/lineitems/1'  
const urlSafeLineItemId = encodeURIComponent(lineItemId)  
const lineItem = requests.get(`https://your.ltiaas.com/api/lineitems/${urlSafeLineItemId}`, { headers })
```

A successful response will contain the requested line item object.

```
{  
  "id": "https://lms.example.com/course/1/lineitems/1",  "scoreMaximum" : 95,  "label" : "Activity 1 - New name"}
```

## Updating a grade line by its ID[​](#updating-a-grade-line-by-its-id "Direct link to heading")

To update a grade line you need to make a PUT request to the `/api/lineitems/:lineItemID` endpoint of your LTIAAS' account subdomain.

tip

For a description of all accepted fields, as well as possible response bodies and statuses, check the [\[PUT\] Line Item endpoint API Reference](/api/put-api-lineitems-lineitemid).

info

Line item IDs are URLs, so their value needs to be URL encoded to be safely sent as a query parameter.

```
// Building Ltik based API authentication header  
const authorizationHeader = `LTIK-AUTH-V2 ${API_KEY}:${LTIK}`  
const headers = { Authorization: authorizationHeader }  
// Making /api/lineitems/:lineItemID PUT request  
const body = {  
  label: 'Activity 1 - New name' // Updating the name  scoreMaximum: 95 // Updating the maximum score}  
const lineItemId = 'https://lms.example.com/course/1/lineitems/1'  
const urlSafeLineItemId = encodeURIComponent(lineItemId)  
const response = requests.put(`https://your.ltiaas.com/api/lineitems/${urlSafeLineItemId}`, body, { headers })
```

info

The body you send will replace the information of the existing grade line. For this reason, similar to when creating a new grade line, the `label` and `scoreMaximum` fields are required.

caution

Fields present in the previous version of the grade line and missing from the new body will be deleted.

A successful response will contain the updated line item object.

```
{  
  "id": "https://lms.example.com/course/1/lineitems/1",  "scoreMaximum" : 95,  "label" : "Activity 1 - New name"}
```

## Deleting a grade line by its ID[​](#deleting-a-grade-line-by-its-id "Direct link to heading")

To delete a grade line related to the context that originated an LTI® launch, you need to make a DELETE request to the `/api/lineitems/:lineItemID` endpoint of your LTIAAS' account subdomain.

tip

For a description of possible response statuses, check the [\[DELETE\] Line Item endpoint API Reference](/api/delete-api-lineitems-lineitemid).

info

Line item IDs are URLs, so their value needs to be URL encoded to be safely sent as a query parameter.

```
// Building Ltik based API authentication header  
const authorizationHeader = `LTIK-AUTH-V2 ${API_KEY}:${LTIK}`  
const headers = { Authorization: authorizationHeader }  
// Making /api/lineitems/:lineItemID DELETE request  
const lineItemId = 'https://lms.example.com/course/1/lineitems/1'  
const urlSafeLineItemId = encodeURIComponent(lineItemId)  
requests.delete(`https://your.ltiaas.com/api/lineitems/${urlSafeLineItemId}`, { headers })
```

## Checking service availability[​](#checking-service-availability "Direct link to heading")

The *Assignment and Grades* service might not be available for every LTI® launch context. Before attempting to manipulate grade lines you can [make a call to the ID Token endpoint](/guides/api/idtoken) and check the [services section](/guides/api/idtoken#assignmentandgrades) to know if the service is available.

You can know if the service is available based on the value of the `idtoken.services.assignmentAndGrades.available` boolean field:

```
// Building Ltik based API authentication header  
const authorizationHeader = `LTIK-AUTH-V2 ${API_KEY}:${LTIK}`  
const headers = { Authorization: authorizationHeader }  
// Making /api/idtoken GET request  
const idtoken = requests.get('https://your.ltiaas.com/api/idtoken', { headers })  
const isServiceAvailable = idtoken['services']['assignmentAndGrades']['available']  

if (isServiceAvailable) {  
  // Making /api/lineitems GET request  const response = requests.get(`https://your.ltiaas.com/api/lineitenms`, { headers })  const members = response['lineItems']}
```

**Tags:**

-   [API](/tags/api)
-   [Grades](/tags/grades)
-   [Grade lines](/tags/grade-lines)
-   [Tutorials](/tags/tutorials)
</file>

<file path="ltiaas-guides-docs/guides/api/manipulating-grades/index.md">
---
title: Manipulating grades
url: https://docs.ltiaas.com/guides/api/manipulating-grades
source: LTIaaS Documentation
---

# Manipulating grades

-   [](/)
-   [Using the LTIAAS API](/guides/api/introduction)
-   Manipulating grades

On this page

# Manipulating grades

tip

Make sure you've read about [authenticating API requests](/guides/api/authentication) before proceeding to the guide below.

tip

Make sure you've read about [manipulating grade lines](/guides/api/manipulating-grade-lines) before proceeding to the guide below.

info

The Scores endpoint accepts both the [ltik based](/guides/api/authentication#ltik-based-authentication) and [service key based](/guides/api/authentication#service-key-based-authentication) API authentication methods.

The LTI® protocol allows you to manipulate grades in the LMS grade book through the *Assignment and Grades - Scores and Results* services. LTIAAS gives you access to these services through the `/api/lineitems/:lineItemID/scores` API endpoint.

![Accessing scores API](/assets/ideal-img/flow_scores.a043d6b.1166.png)

![Accessing scores API](/assets/ideal-img/flow_scores_dark.2078d25.1166.png)

Accessing scores API

## The score object[​](#the-score-object "Direct link to heading")

info

This guide focuses on the most common and/or relevant fields of the score object, a detailed description of available fields can be found in the IMS Score Service documentation:

Learning Tools Interoperability (LTI®) Assignment and Grade Services Specification, IMS Final Release Spec Version 2.0, 1EdTech Consortium, April 2019, 3.4 Score publish service, [https://www.imsglobal.org/spec/lti-ags/v2p0/#score-publish-service](https://www.imsglobal.org/spec/lti-ags/v2p0/#score-publish-service).

The *score* is the object used when we want to update the status of a user in a grade line. This can be used not only to submit grades but also to provide feedback and update the status of the activity.

```
{  
  "userId" : "1",  "activityProgress" : "Completed",  "gradingProgress": "FullyGraded",  "scoreGiven" : 95,  "scoreMaximum" : 100}
```

#### userId \[*required*\][​](#userid-required "Direct link to heading")

The `userId` field is the identifier for the user to whom the score belongs.

caution

Some LMSes might restrict grade submissions based on the user role. It's recommended to only submit grades to users with a student role.

#### activityProgress \[*required*\][​](#activityprogress-required "Direct link to heading")

The `activityProgress` field is an indicator of the user's status towards the activity's completion. The values allowed in this field are:

-   `Initialized` - The user has not started the activity, or the activity has been reset for that student.
-   `Started` - The activity associated with the line item has been started by the user to which the result relates.
-   `InProgress` - The activity is being drafted and is available for comment.
-   `Submitted` - The activity has been submitted at least once by the user but the user is still able make further submissions.
-   `Completed` - The user has completed the activity associated with the line item.

#### gradingProgress \[*required*\][​](#gradingprogress-required "Direct link to heading")

The `gradingProgress` field is an indicator of the user's current grading process in the activity. The values allowed in this field are:

-   `FullyGraded` - The grading process is completed; the score value, if any, represents the current Final Grade; the gradebook may display the grade to the learner.
-   `Pending` - Final Grade is pending, but does not require manual intervention; if a Score value is present, it indicates the current value is partial and may be updated.
-   `PendingManual` - Final Grade is pending, and it does require human intervention; if a Score value is present, it indicates the current value is partial and may be updated during the manual grading.
-   `Failed` - The grading could not complete.
-   `NotReady` - There is no grading process occurring; for example, the student has not yet made any submission.

#### scoreGiven[​](#scoregiven "Direct link to heading")

The `scoreGiven` field is the numeric grade that should be assigned to the user. This field is optional as the score can be used to provide feedback or update a task status without assigning a grade. If present, it MUST be positive number (including 0).

#### scoreMaximum[​](#scoremaximum "Direct link to heading")

The `scoreMaximum` field is the maximum grade that can be assigned to the grade line to which the score belongs. **This field is required if `scoreGiven` is present**. If present, it MUST be a numeric non-null value, strictly greater than 0.

## Submitting grades[​](#submitting-grades "Direct link to heading")

tip

In the example bellow, we're hardcoding the line item ID (grade line ID), for information on how you would actually retrieve the correct line item ID for a context, please check the [Retrieving grade lines guide](/guides/api/manipulating-grade-lines#retrieving-grade-lines-for-a-context).

To submit a score to a grade line, you need to make a POST request to the `/api/lineitems/:lineItemID/scores` endpoint of your LTIAAS' account subdomain. The score will be submitted to the grade line (line item) specified in the request URL.

tip

For a description of all accepted fields, as well as possible response statuses, check the [\[POST\] Scores endpoint API Reference](/api/post-lineitem-scores).

```
// Building Ltik based API authentication header  
const authorizationHeader = `LTIK-AUTH-V2 ${API_KEY}:${LTIK}`  
const headers = { Authorization: authorizationHeader }  
// Making /api/lineitems/:lineItemID/scores POST request  
const score = {  
  userId: '1',  activityProgress: 'Completed',  gradingProgress: 'FullyGraded',  scoreGiven: 95,  scoreMaximum: 100}  
const lineItemId = 'https://lms.example.com/course/1/lineitems/1'  
const urlSafeLineItemId = encodeURIComponent(lineItemId)  
requests.post(`https://your.ltiaas.com/api/lineitems/${urlSafeLineItemId}/scores`, score, { headers })
```

info

When submitting a score, the `userId`, `activityProgress` and `gradingProgress` fields are required.

A successful response will have a `204` status.

## The result object[​](#the-result-object "Direct link to heading")

info

This guide focuses on the most common and/or relevant fields of the result object, a detailed description of available fields can be found in the IMS Result Service documentation:

Learning Tools Interoperability (LTI®) Assignment and Grade Services Specification, IMS Final Release Spec Version 2.0, 1EdTech Consortium, April 2019, 3.9 Results Service, [https://www.imsglobal.org/spec/lti-ags/v2p0/#result-service](https://www.imsglobal.org/spec/lti-ags/v2p0/#result-service).

The *result* is the object returned when we retrieve the grades of a user from a grade line.

```
{  
  "id": "https://lms.example.com/course/1/lineitems/1/results/1",  "scoreOf": "https://lms.example.com/course/1/lineitems/1",  "userId": "1",  "resultScore": 95,  "resultMaximum": 100,}
```

#### id[​](#id "Direct link to heading")

The `id` field is the identifier for the result.

#### scoreOf[​](#scoreof "Direct link to heading")

The `scoreOf` field is the identifier for the line item to which the result belongs.

#### userId[​](#userid "Direct link to heading")

The `userId` field is the identifier for the user to whom the result belongs.

#### resultScore[​](#resultscore "Direct link to heading")

The `resultScore` field is the numeric grade currently assigned to the user. This field may be empty.

#### resultMaximum[​](#resultmaximum "Direct link to heading")

The `resultMaximum` field is the maximum grade that can be assigned to the grade line to which the result belongs.

## Retrieving grades[​](#retrieving-grades "Direct link to heading")

tip

In the example bellow, we're hardcoding the line item ID (grade line ID), for information on how you would actually retrieve the correct line item ID for a context, please check the [Retrieving grade lines guide](/guides/api/manipulating-grade-lines#retrieving-grade-lines-for-a-context).

To retrieve results from a grade line you need to make a GET request to the `/api/lineitems/:lineItemID/scores` endpoint of your LTIAAS' account subdomain. The results will be retrieved from the grade line (line item) specified in the request URL.

tip

For a description of all accepted query parameters, as well as possible response bodies and statuses, check the [\[GET\] Line Items endpoint API Reference](/api/get-lineitem-scores).

```
// Building Ltik based API authentication header  
const authorizationHeader = `LTIK-AUTH-V2 ${API_KEY}:${LTIK}`  
const headers = { Authorization: authorizationHeader }  
// Making /api/lineitems/:lineItemID/scores GET request  
const lineItemId = 'https://lms.example.com/course/1/lineitems/1'  
const urlSafeLineItemId = encodeURIComponent(lineItemId)  
const results = requests.get(`https://your.ltiaas.com/api/lineitems/${urlSafeLineItemId}/scores`, { headers })
```

A successful response will be an object with a `scores` field containing an array of result objects tied to that grade line.

```
{  
  "scores":[    {      "id": "https://lms.example.com/course/1/lineitems/1/results/1",      "scoreOf":"https://lms.example.com/course/1/lineitems/1",      "userId": "1",      "resultScore": 95,      "resultMaximum": 100    },    {      "id":"https://lms.example.com/course/1/lineitems/1/results/2",      "scoreOf":"https://lms.example.com/course/1/lineitems/1",      "userId":"2",      "resultScore":90,      "resultMaximum":100    }  ]}
```

#### Response pagination fields[​](#response-pagination-fields "Direct link to heading")

caution

This functionality might not be supported by every LMS.

The `next`, `prev`, `first` and `last` fields will only be present if there are more results to be retrieved from the grade line. You can read more about this in the [Handling pagination guide](/guides/api/pagination).

```
{  
  "scores": [...],  "next": "https://lms.example.com/course/1/lineitems?page=3",  "prev": "https://lms.example.com/course/1/lineitems?page=1",  "first": "https://lms.example.com/course/1/lineitems?page=1",  "last": "https://lms.example.com/course/1/lineitems?page=4"}
```

### Filtering grades by the user ID[​](#filtering-grades-by-the-user-id "Direct link to heading")

If you want to retrieve only the grades belonging to a specific user, you can populate the `userId` query parameter.

tip

The ID for a user can be retrieved from the `idtoken.user.id` field of the [ID Token](/guides/api/idtoken).

```
// Building Ltik based API authentication header  
const authorizationHeader = `LTIK-AUTH-V2 ${API_KEY}:${LTIK}`  
const headers = { Authorization: authorizationHeader }  
// Making /api/idtoken GET request  
const idtoken = requests.get('https://your.ltiaas.com/api/idtoken', { headers })  
const userId = response['user']['id']  
// Making /api/lineitems/:lineItemID/scores GET request  
const lineItemId = 'https://lms.example.com/course/1/lineitems/1'  
const urlSafeLineItemId = encodeURIComponent(lineItemId)  
const results = requests.get(`https://your.ltiaas.com/api/lineitems/${urlSafeLineItemId}/scores?userId=${userId}`, { headers })
```

## Checking service availability[​](#checking-service-availability "Direct link to heading")

The *Assignment and Grades* service might not be available for every LTI® launch context. Before attempting to manipulate grades you can [make a call to the ID Token endpoint](/guides/api/idtoken) and check the [services section](/guides/api/idtoken#assignmentandgrades) to know if the service is available.

You can know if the service is available based on the value of the `idtoken.services.assignmentAndGrades.available` boolean field:

```
// Building Ltik based API authentication header  
const authorizationHeader = `LTIK-AUTH-V2 ${API_KEY}:${LTIK}`  
const headers = { Authorization: authorizationHeader }  
// Making /api/idtoken GET request  
const idtoken = requests.get('https://your.ltiaas.com/api/idtoken', { headers })  
const isServiceAvailable = idtoken['services']['assignmentAndGrades']['available']  

if (isServiceAvailable) {  
  // Making /api/lineitems/:lineItemID/scores GET request  const lineItemId = 'https://lms.example.com/course/1/lineitems/1'  const urlSafeLineItemId = encodeURIComponent(lineItemId)  const results = requests.get(`https://your.ltiaas.com/api/lineitems/${urlSafeLineItemId}/scores`, { headers })}
```

**Tags:**

-   [API](/tags/api)
-   [Grades](/tags/grades)
-   [Grade lines](/tags/grade-lines)
-   [Tutorials](/tags/tutorials)
</file>

<file path="ltiaas-guides-docs/guides/api/pagination/index.md">
---
title: Handling pagination
url: https://docs.ltiaas.com/guides/api/pagination
source: LTIaaS Documentation
---

# Handling pagination

-   [](/)
-   [Using the LTIAAS API](/guides/api/introduction)
-   Handling pagination

On this page

# Handling pagination

caution

This functionality might not be supported by every LMS. Use with caution.

Some of the LTI® Advantage services provide the LMSes and users with a standardized way of handling a large ammount of results through pagination. LTIAAS allows you to handle pagination easily through special fields in API requests and responses.

## The pagination fields[​](#the-pagination-fields "Direct link to heading")

If the results of a certain service API request are paginated, the response object will likely contain one or more of the following fields:

-   `next` - The URL of the next page of results;
-   `prev` - The URL of the previous page of results;
-   `first` - The URL of the first page of results;
-   `last` - The URL of the last page of results.

tip

Not every endpoint will return all of these fields. We detail expected fields in the guides for each specific service.

## Utilizing pagination fields[​](#utilizing-pagination-fields "Direct link to heading")

After retrieving one of the pagination fields from the API response, you can then use that to perform another API call fetching that specific page of results.

Every endpoint that supports pagination will accept a `url` query parameter, which you can use to specify the page you want to fetch.

info

The value of the pagination fields need to be URL encoded to be safely sent as a query parameter.

```
// Building Ltik based API authentication header  
const authorizationHeader = `LTIK-AUTH-V2 ${API_KEY}:${LTIK}`  
const headers = { Authorization: authorizationHeader }  
// Making /api/memberships GET request  
const response = requests.get(`https://your.ltiaas.com/api/memberships`, { headers })  
// Retrieving next pagination field  
const nextPage = response['next']  
// Making /api/memberships GET request for the next page  
const url = encodeURIComponent(nextPage)  
const nextPageResponse = requests.get(`https://your.ltiaas.com/api/memberships?url=${url}`, { headers })  
// Retrieving next page members  
const members = nextPageResponse['members']
```

## Limiting results[​](#limiting-results "Direct link to heading")

Every endpoint that supports pagination will accept a `limit` query parameter, which you can use to specify the maximum number of results you want to fetch.

```
// Building Ltik based API authentication header  
const authorizationHeader = `LTIK-AUTH-V2 ${API_KEY}:${LTIK}`  
const headers = { Authorization: authorizationHeader }  
// Making /api/memberships GET request  
const limit = 10  
const response = requests.get(`https://your.ltiaas.com/api/memberships?limit=${limit}`, { headers })  
// Retrieving next page members  
const members = response['members'] // Maximum of 10 results
```

info

Some LMSes will have a default number of maximum results per page, which you can override by specifying the `limit` query parameter.

**Tags:**

-   [API](/tags/api)
-   [Pagination](/tags/pagination)
-   [Tutorials](/tags/tutorials)
</file>

<file path="ltiaas-guides-docs/guides/api/roster/index.md">
---
title: Retrieving course roster
url: https://docs.ltiaas.com/guides/api/roster
source: LTIaaS Documentation
---

# Retrieving course roster

-   [](/)
-   [Using the LTIAAS API](/guides/api/introduction)
-   Retrieving course roster

On this page

# Retrieving course roster

tip

Make sure you've read about [authenticating API requests](/guides/api/authentication) before proceeding to the guide below.

info

The Memberships endpoint accepts both the [ltik based](/guides/api/authentication#ltik-based-authentication) and [service key based](/guides/api/authentication#service-key-based-authentication) API authentication methods.

The LTI® protocol allows you to retrieve roster information for an LMS context through the *Names and Roles Provisioning* service. Users that are part of an LMS context are called *members*. LTIAAS gives you access to this service through the `/api/memberships` API endpoint.

![Retrieving course roster](/assets/ideal-img/flow_memberships.3ed6e18.1118.png)

![Retrieving course roster](/assets/ideal-img/flow_memberships_dark.d106714.1118.png)

Retrieving course roster

## The membership object[​](#the-membership-object "Direct link to heading")

info

This guide focuses on the most common and/or relevant fields of the membership object, a detailed description of available fields can be found in the IMS Context Membership documentation:

Learning Tools Interoperability Names and Role Provisioning Services, 1EdTech Final Release Version 2.0, 1EdTech Consortium, April 2019, 2. Context Membership, [https://www.imsglobal.org/spec/lti-nrps/v2p0#context-membership](https://www.imsglobal.org/spec/lti-nrps/v2p0#context-membership)

The *membership* is the LTI® representation of a user in a certain LMS context. Each membership contains information about the user and their status and role within that context.

```
{  
  "userId": "2",  "email": "user@email.com",  "name": "John Doe",  "roles": [...],  "status": "Active"}
```

info

Fields containing personal information like `name` and `email` might not be present in the memberships information. The LMS can choose to omit this information based on their privacy rules. The only fields guaranteed to be present in this section are `userId` and `roles`.

#### userId[​](#userid "Direct link to heading")

The `userId` field contains the user's identifier inside of the LMS. This ID will probably not be unique between LMSes, so it's not recommended to be used alone as a primary identifier. We go into more detail on this topic in the [Performing SSO guide](/guides/api/idtoken#performing-sso).

#### email[​](#email "Direct link to heading")

The `email` field contains the user's registered email inside of the LMS.

#### name[​](#name "Direct link to heading")

The `name` field contains the user's registered full name.

#### roles[​](#roles "Direct link to heading")

The `roles` field contains a list of the user's roles within this specific launch context.

tip

A list of all possible roles can be found in the IMS Role Vocabulary:

Learning Tools Interoperability Core Specification, IMS Final Release Spec Version 1.3, 1EdTech Consortium, April 2019, A.2 Role vocabularies, [https://www.imsglobal.org/node/162741#role-vocabularies](https://www.imsglobal.org/node/162741#role-vocabularies)

#### status[​](#status "Direct link to heading")

The `status` field contains the user's current status within this specific launch context. The value of this field can either be `Active` or `Inactive`.

## Calling the Memberships endpoint[​](#calling-the-memberships-endpoint "Direct link to heading")

To retrieve the memberships related to the context that originated an LTI® launch, you need to make a GET request to the `/api/memberships` endpoint of your LTIAAS' account subdomain.

tip

For a description of all accepted query parameters, as well as possible response bodies and statuses, check the [\[GET\] Memberships endpoint API Reference](/api/get-memberships).

```
// Building Ltik based API authentication header  
const authorizationHeader = `LTIK-AUTH-V2 ${API_KEY}:${LTIK}`  
const headers = { Authorization: authorizationHeader }  
// Making /api/memberships GET request  
const response = requests.get('https://your.ltiaas.com/api/memberships', { headers })  
const members = response['members']
```

A successful response will be an object with a `members` field containing an array of membership objects tied to that LTI® context.

```
{  
  "id": "https://lms.example.com/course/1/memberships?page=1",  "context": {...},  "members": [    {      "userId": "2",      "email": "user@email.com",      "name": "John Doe",      "roles": ["Learner"],      "status": "Active"    },    {      "userId": "3",      "email": "another_user@email.com",      "name": "Bob Doe",      "roles": ["Administrator", "Instructor"],      "status": "Active"    }  ]}
```

The response will also contain an `id` field, containing the ID for the current memberships page. And a `context` object, containing information about the LTI® context that originated the launch.

tip

You can find more information about the `context` object in the [ID Token context field documentation](/guides/api/idtoken#context) as the object here is the same as the one present in the ID Token.

#### Response pagination field[​](#response-pagination-field "Direct link to heading")

caution

This functionality might not be supported by every LMS.

The `next` field will only be present if there are more memberships to be retrieved from the context. You can read more about this in the [Handling pagination guide](/guides/api/pagination).

```
{  
  "id": "https://lms.example.com/course/1/memberships?page=1",  "context": {...},  "members": [...],  "next": "https://lms.example.com/course/1/memberships?page=2"}
```

### Filtering results by user role[​](#filtering-results-by-user-role "Direct link to heading")

caution

This functionality might not be supported by every LMS.

You can filter membership results by a specific role by sending the `?role=<ROLE>` query parameter when calling the `/api/memberships` endpoint.

tip

A list of all possible roles can be found in the IMS Role Vocabulary: Learning Tools Interoperability Core Specification, IMS Final Release Spec Version 1.3, 1EdTech Consortium, April 2019, A.2 Role vocabularies, [https://www.imsglobal.org/node/162741#role-vocabularies](https://www.imsglobal.org/node/162741#role-vocabularies)

Most roles in the vocabulary are represented by URLs, so their value needs to be URL encoded to be safely sent as a query parameter. :::

```
// Building Ltik based API authentication header  
const authorizationHeader = `LTIK-AUTH-V2 ${API_KEY}:${LTIK}`  
const headers = { Authorization: authorizationHeader }  
// Making /api/memberships GET request  
const role = encodeURIComponent('http://purl.imsglobal.org/vocab/lis/v2/membership#Instructor')  
const response = requests.get(`https://your.ltiaas.com/api/memberships?role=${role}`, { headers })  
const members = response['members']
```

### Filtering results by activity access[​](#filtering-results-by-activity-access "Direct link to heading")

caution

This functionality might not be supported by every LMS.

You can filter membership results by users that have access to an activity in the LMS. You can achieve this by sending the `?resourceLinkId=<RESOURCE_LINK_ID>` query parameter when calling the `/api/memberships` endpoint.

tip

The resource link ID for an activity can be retrieved from the `idtoken.launch.resourceLink.id` field of the [ID Token](/guides/api/idtoken) generated by launching the LTI® tool from that activity.

```
// Building Ltik based API authentication header  
const authorizationHeader = `LTIK-AUTH-V2 ${API_KEY}:${LTIK}`  
const headers = { Authorization: authorizationHeader }  
// Making /api/idtoken GET request  
const idtoken = requests.get('https://your.ltiaas.com/api/idtoken', { headers })  
const resourceLinkId = idtoken['launch']['resourceLink']['id']  
// Making /api/memberships GET request  
const response = requests.get(`https://your.ltiaas.com/api/memberships?resourceLinkId=${resourceLinkId}`, { headers })  
const members = response['members']
```

## Checking service availability[​](#checking-service-availability "Direct link to heading")

The *Names and Roles Provisioning* service might not be available for every LTI® launch context. Before attempting to retrieve memberships you can [make a call to the ID Token endpoint](/guides/api/idtoken) and check the [services section](/guides/api/idtoken#namesandroles) to know if the service is available.

You can know if the service is available based on the value of the `idtoken.services.namesAndRoles.available` boolean field:

```
// Building Ltik based API authentication header  
const authorizationHeader = `LTIK-AUTH-V2 ${API_KEY}:${LTIK}`  
const headers = { Authorization: authorizationHeader }  
// Making /api/idtoken GET request  
const idtoken = requests.get('https://your.ltiaas.com/api/idtoken', { headers })  
const isServiceAvailable = idtoken['services']['namesAndRoles']['available']  

if (isServiceAvailable) {  
  // Making /api/memberships GET request  const response = requests.get(`https://your.ltiaas.com/api/memberships`, { headers })  const members = response['members']}
```

**Tags:**

-   [API](/tags/api)
-   [Memberships](/tags/memberships)
-   [Tutorials](/tags/tutorials)
</file>

</files>
